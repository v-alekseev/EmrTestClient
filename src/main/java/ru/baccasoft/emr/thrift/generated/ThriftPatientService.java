/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-17")
public class ThriftPatientService {

  public interface Iface {

    public List<ThriftCaseData> getPatientCases(String patientId, String dateStart, String dateEnd) throws ThriftException, org.apache.thrift.TException;

    public List<ThriftSectionMedicationData> getPatientMedications(String patientId) throws ThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPatientCases(String patientId, String dateStart, String dateEnd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPatientMedications(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<ThriftCaseData> getPatientCases(String patientId, String dateStart, String dateEnd) throws ThriftException, org.apache.thrift.TException
    {
      send_getPatientCases(patientId, dateStart, dateEnd);
      return recv_getPatientCases();
    }

    public void send_getPatientCases(String patientId, String dateStart, String dateEnd) throws org.apache.thrift.TException
    {
      getPatientCases_args args = new getPatientCases_args();
      args.setPatientId(patientId);
      args.setDateStart(dateStart);
      args.setDateEnd(dateEnd);
      sendBase("getPatientCases", args);
    }

    public List<ThriftCaseData> recv_getPatientCases() throws ThriftException, org.apache.thrift.TException
    {
      getPatientCases_result result = new getPatientCases_result();
      receiveBase(result, "getPatientCases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientCases failed: unknown result");
    }

    public List<ThriftSectionMedicationData> getPatientMedications(String patientId) throws ThriftException, org.apache.thrift.TException
    {
      send_getPatientMedications(patientId);
      return recv_getPatientMedications();
    }

    public void send_getPatientMedications(String patientId) throws org.apache.thrift.TException
    {
      getPatientMedications_args args = new getPatientMedications_args();
      args.setPatientId(patientId);
      sendBase("getPatientMedications", args);
    }

    public List<ThriftSectionMedicationData> recv_getPatientMedications() throws ThriftException, org.apache.thrift.TException
    {
      getPatientMedications_result result = new getPatientMedications_result();
      receiveBase(result, "getPatientMedications");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientMedications failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPatientCases(String patientId, String dateStart, String dateEnd, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientCases_call method_call = new getPatientCases_call(patientId, dateStart, dateEnd, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientCases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String patientId;
      private String dateStart;
      private String dateEnd;
      public getPatientCases_call(String patientId, String dateStart, String dateEnd, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
        this.dateStart = dateStart;
        this.dateEnd = dateEnd;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientCases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientCases_args args = new getPatientCases_args();
        args.setPatientId(patientId);
        args.setDateStart(dateStart);
        args.setDateEnd(dateEnd);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftCaseData> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientCases();
      }
    }

    public void getPatientMedications(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientMedications_call method_call = new getPatientMedications_call(patientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientMedications_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String patientId;
      public getPatientMedications_call(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientMedications", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientMedications_args args = new getPatientMedications_args();
        args.setPatientId(patientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftSectionMedicationData> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientMedications();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPatientCases", new getPatientCases());
      processMap.put("getPatientMedications", new getPatientMedications());
      return processMap;
    }

    public static class getPatientCases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientCases_args> {
      public getPatientCases() {
        super("getPatientCases");
      }

      public getPatientCases_args getEmptyArgsInstance() {
        return new getPatientCases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientCases_result getResult(I iface, getPatientCases_args args) throws org.apache.thrift.TException {
        getPatientCases_result result = new getPatientCases_result();
        try {
          result.success = iface.getPatientCases(args.patientId, args.dateStart, args.dateEnd);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getPatientMedications<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientMedications_args> {
      public getPatientMedications() {
        super("getPatientMedications");
      }

      public getPatientMedications_args getEmptyArgsInstance() {
        return new getPatientMedications_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientMedications_result getResult(I iface, getPatientMedications_args args) throws org.apache.thrift.TException {
        getPatientMedications_result result = new getPatientMedications_result();
        try {
          result.success = iface.getPatientMedications(args.patientId);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPatientCases", new getPatientCases());
      processMap.put("getPatientMedications", new getPatientMedications());
      return processMap;
    }

    public static class getPatientCases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPatientCases_args, List<ThriftCaseData>> {
      public getPatientCases() {
        super("getPatientCases");
      }

      public getPatientCases_args getEmptyArgsInstance() {
        return new getPatientCases_args();
      }

      public AsyncMethodCallback<List<ThriftCaseData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftCaseData>>() { 
          public void onComplete(List<ThriftCaseData> o) {
            getPatientCases_result result = new getPatientCases_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPatientCases_result result = new getPatientCases_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPatientCases_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftCaseData>> resultHandler) throws TException {
        iface.getPatientCases(args.patientId, args.dateStart, args.dateEnd,resultHandler);
      }
    }

    public static class getPatientMedications<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPatientMedications_args, List<ThriftSectionMedicationData>> {
      public getPatientMedications() {
        super("getPatientMedications");
      }

      public getPatientMedications_args getEmptyArgsInstance() {
        return new getPatientMedications_args();
      }

      public AsyncMethodCallback<List<ThriftSectionMedicationData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftSectionMedicationData>>() { 
          public void onComplete(List<ThriftSectionMedicationData> o) {
            getPatientMedications_result result = new getPatientMedications_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPatientMedications_result result = new getPatientMedications_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPatientMedications_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftSectionMedicationData>> resultHandler) throws TException {
        iface.getPatientMedications(args.patientId,resultHandler);
      }
    }

  }

  public static class getPatientCases_args implements org.apache.thrift.TBase<getPatientCases_args, getPatientCases_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientCases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientCases_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_START_FIELD_DESC = new org.apache.thrift.protocol.TField("dateStart", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("dateEnd", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientCases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientCases_argsTupleSchemeFactory());
    }

    public String patientId; // required
    public String dateStart; // required
    public String dateEnd; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId"),
      DATE_START((short)2, "dateStart"),
      DATE_END((short)3, "dateEnd");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          case 2: // DATE_START
            return DATE_START;
          case 3: // DATE_END
            return DATE_END;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE_START, new org.apache.thrift.meta_data.FieldMetaData("dateStart", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE_END, new org.apache.thrift.meta_data.FieldMetaData("dateEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientCases_args.class, metaDataMap);
    }

    public getPatientCases_args() {
    }

    public getPatientCases_args(
      String patientId,
      String dateStart,
      String dateEnd)
    {
      this();
      this.patientId = patientId;
      this.dateStart = dateStart;
      this.dateEnd = dateEnd;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientCases_args(getPatientCases_args other) {
      if (other.isSetPatientId()) {
        this.patientId = other.patientId;
      }
      if (other.isSetDateStart()) {
        this.dateStart = other.dateStart;
      }
      if (other.isSetDateEnd()) {
        this.dateEnd = other.dateEnd;
      }
    }

    public getPatientCases_args deepCopy() {
      return new getPatientCases_args(this);
    }

    @Override
    public void clear() {
      this.patientId = null;
      this.dateStart = null;
      this.dateEnd = null;
    }

    public String getPatientId() {
      return this.patientId;
    }

    public getPatientCases_args setPatientId(String patientId) {
      this.patientId = patientId;
      return this;
    }

    public void unsetPatientId() {
      this.patientId = null;
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return this.patientId != null;
    }

    public void setPatientIdIsSet(boolean value) {
      if (!value) {
        this.patientId = null;
      }
    }

    public String getDateStart() {
      return this.dateStart;
    }

    public getPatientCases_args setDateStart(String dateStart) {
      this.dateStart = dateStart;
      return this;
    }

    public void unsetDateStart() {
      this.dateStart = null;
    }

    /** Returns true if field dateStart is set (has been assigned a value) and false otherwise */
    public boolean isSetDateStart() {
      return this.dateStart != null;
    }

    public void setDateStartIsSet(boolean value) {
      if (!value) {
        this.dateStart = null;
      }
    }

    public String getDateEnd() {
      return this.dateEnd;
    }

    public getPatientCases_args setDateEnd(String dateEnd) {
      this.dateEnd = dateEnd;
      return this;
    }

    public void unsetDateEnd() {
      this.dateEnd = null;
    }

    /** Returns true if field dateEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetDateEnd() {
      return this.dateEnd != null;
    }

    public void setDateEndIsSet(boolean value) {
      if (!value) {
        this.dateEnd = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((String)value);
        }
        break;

      case DATE_START:
        if (value == null) {
          unsetDateStart();
        } else {
          setDateStart((String)value);
        }
        break;

      case DATE_END:
        if (value == null) {
          unsetDateEnd();
        } else {
          setDateEnd((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return getPatientId();

      case DATE_START:
        return getDateStart();

      case DATE_END:
        return getDateEnd();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      case DATE_START:
        return isSetDateStart();
      case DATE_END:
        return isSetDateEnd();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientCases_args)
        return this.equals((getPatientCases_args)that);
      return false;
    }

    public boolean equals(getPatientCases_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true && this.isSetPatientId();
      boolean that_present_patientId = true && that.isSetPatientId();
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (!this.patientId.equals(that.patientId))
          return false;
      }

      boolean this_present_dateStart = true && this.isSetDateStart();
      boolean that_present_dateStart = true && that.isSetDateStart();
      if (this_present_dateStart || that_present_dateStart) {
        if (!(this_present_dateStart && that_present_dateStart))
          return false;
        if (!this.dateStart.equals(that.dateStart))
          return false;
      }

      boolean this_present_dateEnd = true && this.isSetDateEnd();
      boolean that_present_dateEnd = true && that.isSetDateEnd();
      if (this_present_dateEnd || that_present_dateEnd) {
        if (!(this_present_dateEnd && that_present_dateEnd))
          return false;
        if (!this.dateEnd.equals(that.dateEnd))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_patientId = true && (isSetPatientId());
      list.add(present_patientId);
      if (present_patientId)
        list.add(patientId);

      boolean present_dateStart = true && (isSetDateStart());
      list.add(present_dateStart);
      if (present_dateStart)
        list.add(dateStart);

      boolean present_dateEnd = true && (isSetDateEnd());
      list.add(present_dateEnd);
      if (present_dateEnd)
        list.add(dateEnd);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientCases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(other.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, other.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDateStart()).compareTo(other.isSetDateStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateStart, other.dateStart);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDateEnd()).compareTo(other.isSetDateEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDateEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateEnd, other.dateEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientCases_args(");
      boolean first = true;

      sb.append("patientId:");
      if (this.patientId == null) {
        sb.append("null");
      } else {
        sb.append(this.patientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateStart:");
      if (this.dateStart == null) {
        sb.append("null");
      } else {
        sb.append(this.dateStart);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dateEnd:");
      if (this.dateEnd == null) {
        sb.append("null");
      } else {
        sb.append(this.dateEnd);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientCases_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientCases_argsStandardScheme getScheme() {
        return new getPatientCases_argsStandardScheme();
      }
    }

    private static class getPatientCases_argsStandardScheme extends StandardScheme<getPatientCases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientCases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patientId = iprot.readString();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE_START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dateStart = iprot.readString();
                struct.setDateStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dateEnd = iprot.readString();
                struct.setDateEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientCases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patientId != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patientId);
          oprot.writeFieldEnd();
        }
        if (struct.dateStart != null) {
          oprot.writeFieldBegin(DATE_START_FIELD_DESC);
          oprot.writeString(struct.dateStart);
          oprot.writeFieldEnd();
        }
        if (struct.dateEnd != null) {
          oprot.writeFieldBegin(DATE_END_FIELD_DESC);
          oprot.writeString(struct.dateEnd);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientCases_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientCases_argsTupleScheme getScheme() {
        return new getPatientCases_argsTupleScheme();
      }
    }

    private static class getPatientCases_argsTupleScheme extends TupleScheme<getPatientCases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientCases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        if (struct.isSetDateStart()) {
          optionals.set(1);
        }
        if (struct.isSetDateEnd()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPatientId()) {
          oprot.writeString(struct.patientId);
        }
        if (struct.isSetDateStart()) {
          oprot.writeString(struct.dateStart);
        }
        if (struct.isSetDateEnd()) {
          oprot.writeString(struct.dateEnd);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientCases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.patientId = iprot.readString();
          struct.setPatientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dateStart = iprot.readString();
          struct.setDateStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dateEnd = iprot.readString();
          struct.setDateEndIsSet(true);
        }
      }
    }

  }

  public static class getPatientCases_result implements org.apache.thrift.TBase<getPatientCases_result, getPatientCases_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientCases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientCases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientCases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientCases_resultTupleSchemeFactory());
    }

    public List<ThriftCaseData> success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseData.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientCases_result.class, metaDataMap);
    }

    public getPatientCases_result() {
    }

    public getPatientCases_result(
      List<ThriftCaseData> success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientCases_result(getPatientCases_result other) {
      if (other.isSetSuccess()) {
        List<ThriftCaseData> __this__success = new ArrayList<ThriftCaseData>(other.success.size());
        for (ThriftCaseData other_element : other.success) {
          __this__success.add(new ThriftCaseData(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getPatientCases_result deepCopy() {
      return new getPatientCases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftCaseData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftCaseData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftCaseData>();
      }
      this.success.add(elem);
    }

    public List<ThriftCaseData> getSuccess() {
      return this.success;
    }

    public getPatientCases_result setSuccess(List<ThriftCaseData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getPatientCases_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftCaseData>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientCases_result)
        return this.equals((getPatientCases_result)that);
      return false;
    }

    public boolean equals(getPatientCases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientCases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientCases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientCases_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientCases_resultStandardScheme getScheme() {
        return new getPatientCases_resultStandardScheme();
      }
    }

    private static class getPatientCases_resultStandardScheme extends StandardScheme<getPatientCases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientCases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftCaseData>(_list24.size);
                  ThriftCaseData _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new ThriftCaseData();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientCases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftCaseData _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientCases_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientCases_resultTupleScheme getScheme() {
        return new getPatientCases_resultTupleScheme();
      }
    }

    private static class getPatientCases_resultTupleScheme extends TupleScheme<getPatientCases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientCases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftCaseData _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientCases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftCaseData>(_list29.size);
            ThriftCaseData _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new ThriftCaseData();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getPatientMedications_args implements org.apache.thrift.TBase<getPatientMedications_args, getPatientMedications_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientMedications_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientMedications_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientMedications_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientMedications_argsTupleSchemeFactory());
    }

    public String patientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientMedications_args.class, metaDataMap);
    }

    public getPatientMedications_args() {
    }

    public getPatientMedications_args(
      String patientId)
    {
      this();
      this.patientId = patientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientMedications_args(getPatientMedications_args other) {
      if (other.isSetPatientId()) {
        this.patientId = other.patientId;
      }
    }

    public getPatientMedications_args deepCopy() {
      return new getPatientMedications_args(this);
    }

    @Override
    public void clear() {
      this.patientId = null;
    }

    public String getPatientId() {
      return this.patientId;
    }

    public getPatientMedications_args setPatientId(String patientId) {
      this.patientId = patientId;
      return this;
    }

    public void unsetPatientId() {
      this.patientId = null;
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return this.patientId != null;
    }

    public void setPatientIdIsSet(boolean value) {
      if (!value) {
        this.patientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return getPatientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientMedications_args)
        return this.equals((getPatientMedications_args)that);
      return false;
    }

    public boolean equals(getPatientMedications_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true && this.isSetPatientId();
      boolean that_present_patientId = true && that.isSetPatientId();
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (!this.patientId.equals(that.patientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_patientId = true && (isSetPatientId());
      list.add(present_patientId);
      if (present_patientId)
        list.add(patientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientMedications_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(other.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, other.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientMedications_args(");
      boolean first = true;

      sb.append("patientId:");
      if (this.patientId == null) {
        sb.append("null");
      } else {
        sb.append(this.patientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientMedications_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientMedications_argsStandardScheme getScheme() {
        return new getPatientMedications_argsStandardScheme();
      }
    }

    private static class getPatientMedications_argsStandardScheme extends StandardScheme<getPatientMedications_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientMedications_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patientId = iprot.readString();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientMedications_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patientId != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientMedications_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientMedications_argsTupleScheme getScheme() {
        return new getPatientMedications_argsTupleScheme();
      }
    }

    private static class getPatientMedications_argsTupleScheme extends TupleScheme<getPatientMedications_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientMedications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatientId()) {
          oprot.writeString(struct.patientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientMedications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patientId = iprot.readString();
          struct.setPatientIdIsSet(true);
        }
      }
    }

  }

  public static class getPatientMedications_result implements org.apache.thrift.TBase<getPatientMedications_result, getPatientMedications_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientMedications_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientMedications_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientMedications_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientMedications_resultTupleSchemeFactory());
    }

    public List<ThriftSectionMedicationData> success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSectionMedicationData.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientMedications_result.class, metaDataMap);
    }

    public getPatientMedications_result() {
    }

    public getPatientMedications_result(
      List<ThriftSectionMedicationData> success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientMedications_result(getPatientMedications_result other) {
      if (other.isSetSuccess()) {
        List<ThriftSectionMedicationData> __this__success = new ArrayList<ThriftSectionMedicationData>(other.success.size());
        for (ThriftSectionMedicationData other_element : other.success) {
          __this__success.add(new ThriftSectionMedicationData(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getPatientMedications_result deepCopy() {
      return new getPatientMedications_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftSectionMedicationData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftSectionMedicationData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftSectionMedicationData>();
      }
      this.success.add(elem);
    }

    public List<ThriftSectionMedicationData> getSuccess() {
      return this.success;
    }

    public getPatientMedications_result setSuccess(List<ThriftSectionMedicationData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getPatientMedications_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftSectionMedicationData>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientMedications_result)
        return this.equals((getPatientMedications_result)that);
      return false;
    }

    public boolean equals(getPatientMedications_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientMedications_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientMedications_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientMedications_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientMedications_resultStandardScheme getScheme() {
        return new getPatientMedications_resultStandardScheme();
      }
    }

    private static class getPatientMedications_resultStandardScheme extends StandardScheme<getPatientMedications_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientMedications_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftSectionMedicationData>(_list32.size);
                  ThriftSectionMedicationData _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new ThriftSectionMedicationData();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientMedications_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftSectionMedicationData _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientMedications_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientMedications_resultTupleScheme getScheme() {
        return new getPatientMedications_resultTupleScheme();
      }
    }

    private static class getPatientMedications_resultTupleScheme extends TupleScheme<getPatientMedications_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientMedications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftSectionMedicationData _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientMedications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftSectionMedicationData>(_list37.size);
            ThriftSectionMedicationData _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new ThriftSectionMedicationData();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
