/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-01")
public class ThriftSectionMedicationData implements org.apache.thrift.TBase<ThriftSectionMedicationData, ThriftSectionMedicationData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSectionMedicationData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSectionMedicationData");

  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("caseID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField E_PRESCRIPTION_N_FIELD_DESC = new org.apache.thrift.protocol.TField("ePrescriptionN", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DRUG_FIELD_DESC = new org.apache.thrift.protocol.TField("drug", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DOSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("dosage", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField INSTRUCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("instructions", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSectionMedicationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSectionMedicationDataTupleSchemeFactory());
  }

  public String patientID; // required
  public String caseID; // required
  public String ePrescriptionN; // required
  public String drug; // required
  public String dosage; // required
  public String startDate; // required
  public String endDate; // required
  public String status; // required
  public String instructions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATIENT_ID((short)1, "patientID"),
    CASE_ID((short)2, "caseID"),
    E_PRESCRIPTION_N((short)3, "ePrescriptionN"),
    DRUG((short)4, "drug"),
    DOSAGE((short)5, "dosage"),
    START_DATE((short)6, "startDate"),
    END_DATE((short)7, "endDate"),
    STATUS((short)8, "status"),
    INSTRUCTIONS((short)9, "instructions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATIENT_ID
          return PATIENT_ID;
        case 2: // CASE_ID
          return CASE_ID;
        case 3: // E_PRESCRIPTION_N
          return E_PRESCRIPTION_N;
        case 4: // DRUG
          return DRUG;
        case 5: // DOSAGE
          return DOSAGE;
        case 6: // START_DATE
          return START_DATE;
        case 7: // END_DATE
          return END_DATE;
        case 8: // STATUS
          return STATUS;
        case 9: // INSTRUCTIONS
          return INSTRUCTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASE_ID, new org.apache.thrift.meta_data.FieldMetaData("caseID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.E_PRESCRIPTION_N, new org.apache.thrift.meta_data.FieldMetaData("ePrescriptionN", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DRUG, new org.apache.thrift.meta_data.FieldMetaData("drug", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOSAGE, new org.apache.thrift.meta_data.FieldMetaData("dosage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTIONS, new org.apache.thrift.meta_data.FieldMetaData("instructions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSectionMedicationData.class, metaDataMap);
  }

  public ThriftSectionMedicationData() {
  }

  public ThriftSectionMedicationData(
    String patientID,
    String caseID,
    String ePrescriptionN,
    String drug,
    String dosage,
    String startDate,
    String endDate,
    String status,
    String instructions)
  {
    this();
    this.patientID = patientID;
    this.caseID = caseID;
    this.ePrescriptionN = ePrescriptionN;
    this.drug = drug;
    this.dosage = dosage;
    this.startDate = startDate;
    this.endDate = endDate;
    this.status = status;
    this.instructions = instructions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSectionMedicationData(ThriftSectionMedicationData other) {
    if (other.isSetPatientID()) {
      this.patientID = other.patientID;
    }
    if (other.isSetCaseID()) {
      this.caseID = other.caseID;
    }
    if (other.isSetEPrescriptionN()) {
      this.ePrescriptionN = other.ePrescriptionN;
    }
    if (other.isSetDrug()) {
      this.drug = other.drug;
    }
    if (other.isSetDosage()) {
      this.dosage = other.dosage;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetInstructions()) {
      this.instructions = other.instructions;
    }
  }

  public ThriftSectionMedicationData deepCopy() {
    return new ThriftSectionMedicationData(this);
  }

  @Override
  public void clear() {
    this.patientID = null;
    this.caseID = null;
    this.ePrescriptionN = null;
    this.drug = null;
    this.dosage = null;
    this.startDate = null;
    this.endDate = null;
    this.status = null;
    this.instructions = null;
  }

  public String getPatientID() {
    return this.patientID;
  }

  public ThriftSectionMedicationData setPatientID(String patientID) {
    this.patientID = patientID;
    return this;
  }

  public void unsetPatientID() {
    this.patientID = null;
  }

  /** Returns true if field patientID is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientID() {
    return this.patientID != null;
  }

  public void setPatientIDIsSet(boolean value) {
    if (!value) {
      this.patientID = null;
    }
  }

  public String getCaseID() {
    return this.caseID;
  }

  public ThriftSectionMedicationData setCaseID(String caseID) {
    this.caseID = caseID;
    return this;
  }

  public void unsetCaseID() {
    this.caseID = null;
  }

  /** Returns true if field caseID is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseID() {
    return this.caseID != null;
  }

  public void setCaseIDIsSet(boolean value) {
    if (!value) {
      this.caseID = null;
    }
  }

  public String getEPrescriptionN() {
    return this.ePrescriptionN;
  }

  public ThriftSectionMedicationData setEPrescriptionN(String ePrescriptionN) {
    this.ePrescriptionN = ePrescriptionN;
    return this;
  }

  public void unsetEPrescriptionN() {
    this.ePrescriptionN = null;
  }

  /** Returns true if field ePrescriptionN is set (has been assigned a value) and false otherwise */
  public boolean isSetEPrescriptionN() {
    return this.ePrescriptionN != null;
  }

  public void setEPrescriptionNIsSet(boolean value) {
    if (!value) {
      this.ePrescriptionN = null;
    }
  }

  public String getDrug() {
    return this.drug;
  }

  public ThriftSectionMedicationData setDrug(String drug) {
    this.drug = drug;
    return this;
  }

  public void unsetDrug() {
    this.drug = null;
  }

  /** Returns true if field drug is set (has been assigned a value) and false otherwise */
  public boolean isSetDrug() {
    return this.drug != null;
  }

  public void setDrugIsSet(boolean value) {
    if (!value) {
      this.drug = null;
    }
  }

  public String getDosage() {
    return this.dosage;
  }

  public ThriftSectionMedicationData setDosage(String dosage) {
    this.dosage = dosage;
    return this;
  }

  public void unsetDosage() {
    this.dosage = null;
  }

  /** Returns true if field dosage is set (has been assigned a value) and false otherwise */
  public boolean isSetDosage() {
    return this.dosage != null;
  }

  public void setDosageIsSet(boolean value) {
    if (!value) {
      this.dosage = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public ThriftSectionMedicationData setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public ThriftSectionMedicationData setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ThriftSectionMedicationData setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getInstructions() {
    return this.instructions;
  }

  public ThriftSectionMedicationData setInstructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

  public void unsetInstructions() {
    this.instructions = null;
  }

  /** Returns true if field instructions is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructions() {
    return this.instructions != null;
  }

  public void setInstructionsIsSet(boolean value) {
    if (!value) {
      this.instructions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATIENT_ID:
      if (value == null) {
        unsetPatientID();
      } else {
        setPatientID((String)value);
      }
      break;

    case CASE_ID:
      if (value == null) {
        unsetCaseID();
      } else {
        setCaseID((String)value);
      }
      break;

    case E_PRESCRIPTION_N:
      if (value == null) {
        unsetEPrescriptionN();
      } else {
        setEPrescriptionN((String)value);
      }
      break;

    case DRUG:
      if (value == null) {
        unsetDrug();
      } else {
        setDrug((String)value);
      }
      break;

    case DOSAGE:
      if (value == null) {
        unsetDosage();
      } else {
        setDosage((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case INSTRUCTIONS:
      if (value == null) {
        unsetInstructions();
      } else {
        setInstructions((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATIENT_ID:
      return getPatientID();

    case CASE_ID:
      return getCaseID();

    case E_PRESCRIPTION_N:
      return getEPrescriptionN();

    case DRUG:
      return getDrug();

    case DOSAGE:
      return getDosage();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case STATUS:
      return getStatus();

    case INSTRUCTIONS:
      return getInstructions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATIENT_ID:
      return isSetPatientID();
    case CASE_ID:
      return isSetCaseID();
    case E_PRESCRIPTION_N:
      return isSetEPrescriptionN();
    case DRUG:
      return isSetDrug();
    case DOSAGE:
      return isSetDosage();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case STATUS:
      return isSetStatus();
    case INSTRUCTIONS:
      return isSetInstructions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSectionMedicationData)
      return this.equals((ThriftSectionMedicationData)that);
    return false;
  }

  public boolean equals(ThriftSectionMedicationData that) {
    if (that == null)
      return false;

    boolean this_present_patientID = true && this.isSetPatientID();
    boolean that_present_patientID = true && that.isSetPatientID();
    if (this_present_patientID || that_present_patientID) {
      if (!(this_present_patientID && that_present_patientID))
        return false;
      if (!this.patientID.equals(that.patientID))
        return false;
    }

    boolean this_present_caseID = true && this.isSetCaseID();
    boolean that_present_caseID = true && that.isSetCaseID();
    if (this_present_caseID || that_present_caseID) {
      if (!(this_present_caseID && that_present_caseID))
        return false;
      if (!this.caseID.equals(that.caseID))
        return false;
    }

    boolean this_present_ePrescriptionN = true && this.isSetEPrescriptionN();
    boolean that_present_ePrescriptionN = true && that.isSetEPrescriptionN();
    if (this_present_ePrescriptionN || that_present_ePrescriptionN) {
      if (!(this_present_ePrescriptionN && that_present_ePrescriptionN))
        return false;
      if (!this.ePrescriptionN.equals(that.ePrescriptionN))
        return false;
    }

    boolean this_present_drug = true && this.isSetDrug();
    boolean that_present_drug = true && that.isSetDrug();
    if (this_present_drug || that_present_drug) {
      if (!(this_present_drug && that_present_drug))
        return false;
      if (!this.drug.equals(that.drug))
        return false;
    }

    boolean this_present_dosage = true && this.isSetDosage();
    boolean that_present_dosage = true && that.isSetDosage();
    if (this_present_dosage || that_present_dosage) {
      if (!(this_present_dosage && that_present_dosage))
        return false;
      if (!this.dosage.equals(that.dosage))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_instructions = true && this.isSetInstructions();
    boolean that_present_instructions = true && that.isSetInstructions();
    if (this_present_instructions || that_present_instructions) {
      if (!(this_present_instructions && that_present_instructions))
        return false;
      if (!this.instructions.equals(that.instructions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_patientID = true && (isSetPatientID());
    list.add(present_patientID);
    if (present_patientID)
      list.add(patientID);

    boolean present_caseID = true && (isSetCaseID());
    list.add(present_caseID);
    if (present_caseID)
      list.add(caseID);

    boolean present_ePrescriptionN = true && (isSetEPrescriptionN());
    list.add(present_ePrescriptionN);
    if (present_ePrescriptionN)
      list.add(ePrescriptionN);

    boolean present_drug = true && (isSetDrug());
    list.add(present_drug);
    if (present_drug)
      list.add(drug);

    boolean present_dosage = true && (isSetDosage());
    list.add(present_dosage);
    if (present_dosage)
      list.add(dosage);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_instructions = true && (isSetInstructions());
    list.add(present_instructions);
    if (present_instructions)
      list.add(instructions);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSectionMedicationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPatientID()).compareTo(other.isSetPatientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientID, other.patientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaseID()).compareTo(other.isSetCaseID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseID, other.caseID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEPrescriptionN()).compareTo(other.isSetEPrescriptionN());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEPrescriptionN()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ePrescriptionN, other.ePrescriptionN);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDrug()).compareTo(other.isSetDrug());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDrug()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.drug, other.drug);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDosage()).compareTo(other.isSetDosage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDosage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dosage, other.dosage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstructions()).compareTo(other.isSetInstructions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructions, other.instructions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSectionMedicationData(");
    boolean first = true;

    sb.append("patientID:");
    if (this.patientID == null) {
      sb.append("null");
    } else {
      sb.append(this.patientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("caseID:");
    if (this.caseID == null) {
      sb.append("null");
    } else {
      sb.append(this.caseID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ePrescriptionN:");
    if (this.ePrescriptionN == null) {
      sb.append("null");
    } else {
      sb.append(this.ePrescriptionN);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("drug:");
    if (this.drug == null) {
      sb.append("null");
    } else {
      sb.append(this.drug);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dosage:");
    if (this.dosage == null) {
      sb.append("null");
    } else {
      sb.append(this.dosage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instructions:");
    if (this.instructions == null) {
      sb.append("null");
    } else {
      sb.append(this.instructions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSectionMedicationDataStandardSchemeFactory implements SchemeFactory {
    public ThriftSectionMedicationDataStandardScheme getScheme() {
      return new ThriftSectionMedicationDataStandardScheme();
    }
  }

  private static class ThriftSectionMedicationDataStandardScheme extends StandardScheme<ThriftSectionMedicationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSectionMedicationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patientID = iprot.readString();
              struct.setPatientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caseID = iprot.readString();
              struct.setCaseIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // E_PRESCRIPTION_N
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ePrescriptionN = iprot.readString();
              struct.setEPrescriptionNIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DRUG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.drug = iprot.readString();
              struct.setDrugIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dosage = iprot.readString();
              struct.setDosageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTRUCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instructions = iprot.readString();
              struct.setInstructionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSectionMedicationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.patientID != null) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeString(struct.patientID);
        oprot.writeFieldEnd();
      }
      if (struct.caseID != null) {
        oprot.writeFieldBegin(CASE_ID_FIELD_DESC);
        oprot.writeString(struct.caseID);
        oprot.writeFieldEnd();
      }
      if (struct.ePrescriptionN != null) {
        oprot.writeFieldBegin(E_PRESCRIPTION_N_FIELD_DESC);
        oprot.writeString(struct.ePrescriptionN);
        oprot.writeFieldEnd();
      }
      if (struct.drug != null) {
        oprot.writeFieldBegin(DRUG_FIELD_DESC);
        oprot.writeString(struct.drug);
        oprot.writeFieldEnd();
      }
      if (struct.dosage != null) {
        oprot.writeFieldBegin(DOSAGE_FIELD_DESC);
        oprot.writeString(struct.dosage);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.instructions != null) {
        oprot.writeFieldBegin(INSTRUCTIONS_FIELD_DESC);
        oprot.writeString(struct.instructions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSectionMedicationDataTupleSchemeFactory implements SchemeFactory {
    public ThriftSectionMedicationDataTupleScheme getScheme() {
      return new ThriftSectionMedicationDataTupleScheme();
    }
  }

  private static class ThriftSectionMedicationDataTupleScheme extends TupleScheme<ThriftSectionMedicationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSectionMedicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPatientID()) {
        optionals.set(0);
      }
      if (struct.isSetCaseID()) {
        optionals.set(1);
      }
      if (struct.isSetEPrescriptionN()) {
        optionals.set(2);
      }
      if (struct.isSetDrug()) {
        optionals.set(3);
      }
      if (struct.isSetDosage()) {
        optionals.set(4);
      }
      if (struct.isSetStartDate()) {
        optionals.set(5);
      }
      if (struct.isSetEndDate()) {
        optionals.set(6);
      }
      if (struct.isSetStatus()) {
        optionals.set(7);
      }
      if (struct.isSetInstructions()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetPatientID()) {
        oprot.writeString(struct.patientID);
      }
      if (struct.isSetCaseID()) {
        oprot.writeString(struct.caseID);
      }
      if (struct.isSetEPrescriptionN()) {
        oprot.writeString(struct.ePrescriptionN);
      }
      if (struct.isSetDrug()) {
        oprot.writeString(struct.drug);
      }
      if (struct.isSetDosage()) {
        oprot.writeString(struct.dosage);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetInstructions()) {
        oprot.writeString(struct.instructions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSectionMedicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.patientID = iprot.readString();
        struct.setPatientIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.caseID = iprot.readString();
        struct.setCaseIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ePrescriptionN = iprot.readString();
        struct.setEPrescriptionNIsSet(true);
      }
      if (incoming.get(3)) {
        struct.drug = iprot.readString();
        struct.setDrugIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dosage = iprot.readString();
        struct.setDosageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(8)) {
        struct.instructions = iprot.readString();
        struct.setInstructionsIsSet(true);
      }
    }
  }

}

