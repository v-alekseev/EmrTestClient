/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-17")
public class ThriftSectionProblemData implements org.apache.thrift.TBase<ThriftSectionProblemData, ThriftSectionProblemData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSectionProblemData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSectionProblemData");

  private static final org.apache.thrift.protocol.TField DISEASE_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("diseaseGroup", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISEASE_FIELD_DESC = new org.apache.thrift.protocol.TField("disease", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLINICAL_DIAGNOSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("clinicalDiagnosis", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EFFECTIVE_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("effectiveStartDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EFFECTIVE_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("effectiveEndDate", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSectionProblemDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSectionProblemDataTupleSchemeFactory());
  }

  public String diseaseGroup; // required
  public String disease; // required
  public String clinicalDiagnosis; // required
  public String status; // required
  public String effectiveStartDate; // required
  public String effectiveEndDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DISEASE_GROUP((short)1, "diseaseGroup"),
    DISEASE((short)2, "disease"),
    CLINICAL_DIAGNOSIS((short)3, "clinicalDiagnosis"),
    STATUS((short)4, "status"),
    EFFECTIVE_START_DATE((short)5, "effectiveStartDate"),
    EFFECTIVE_END_DATE((short)6, "effectiveEndDate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DISEASE_GROUP
          return DISEASE_GROUP;
        case 2: // DISEASE
          return DISEASE;
        case 3: // CLINICAL_DIAGNOSIS
          return CLINICAL_DIAGNOSIS;
        case 4: // STATUS
          return STATUS;
        case 5: // EFFECTIVE_START_DATE
          return EFFECTIVE_START_DATE;
        case 6: // EFFECTIVE_END_DATE
          return EFFECTIVE_END_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DISEASE_GROUP, new org.apache.thrift.meta_data.FieldMetaData("diseaseGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISEASE, new org.apache.thrift.meta_data.FieldMetaData("disease", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLINICAL_DIAGNOSIS, new org.apache.thrift.meta_data.FieldMetaData("clinicalDiagnosis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EFFECTIVE_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("effectiveStartDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EFFECTIVE_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("effectiveEndDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSectionProblemData.class, metaDataMap);
  }

  public ThriftSectionProblemData() {
  }

  public ThriftSectionProblemData(
    String diseaseGroup,
    String disease,
    String clinicalDiagnosis,
    String status,
    String effectiveStartDate,
    String effectiveEndDate)
  {
    this();
    this.diseaseGroup = diseaseGroup;
    this.disease = disease;
    this.clinicalDiagnosis = clinicalDiagnosis;
    this.status = status;
    this.effectiveStartDate = effectiveStartDate;
    this.effectiveEndDate = effectiveEndDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSectionProblemData(ThriftSectionProblemData other) {
    if (other.isSetDiseaseGroup()) {
      this.diseaseGroup = other.diseaseGroup;
    }
    if (other.isSetDisease()) {
      this.disease = other.disease;
    }
    if (other.isSetClinicalDiagnosis()) {
      this.clinicalDiagnosis = other.clinicalDiagnosis;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetEffectiveStartDate()) {
      this.effectiveStartDate = other.effectiveStartDate;
    }
    if (other.isSetEffectiveEndDate()) {
      this.effectiveEndDate = other.effectiveEndDate;
    }
  }

  public ThriftSectionProblemData deepCopy() {
    return new ThriftSectionProblemData(this);
  }

  @Override
  public void clear() {
    this.diseaseGroup = null;
    this.disease = null;
    this.clinicalDiagnosis = null;
    this.status = null;
    this.effectiveStartDate = null;
    this.effectiveEndDate = null;
  }

  public String getDiseaseGroup() {
    return this.diseaseGroup;
  }

  public ThriftSectionProblemData setDiseaseGroup(String diseaseGroup) {
    this.diseaseGroup = diseaseGroup;
    return this;
  }

  public void unsetDiseaseGroup() {
    this.diseaseGroup = null;
  }

  /** Returns true if field diseaseGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetDiseaseGroup() {
    return this.diseaseGroup != null;
  }

  public void setDiseaseGroupIsSet(boolean value) {
    if (!value) {
      this.diseaseGroup = null;
    }
  }

  public String getDisease() {
    return this.disease;
  }

  public ThriftSectionProblemData setDisease(String disease) {
    this.disease = disease;
    return this;
  }

  public void unsetDisease() {
    this.disease = null;
  }

  /** Returns true if field disease is set (has been assigned a value) and false otherwise */
  public boolean isSetDisease() {
    return this.disease != null;
  }

  public void setDiseaseIsSet(boolean value) {
    if (!value) {
      this.disease = null;
    }
  }

  public String getClinicalDiagnosis() {
    return this.clinicalDiagnosis;
  }

  public ThriftSectionProblemData setClinicalDiagnosis(String clinicalDiagnosis) {
    this.clinicalDiagnosis = clinicalDiagnosis;
    return this;
  }

  public void unsetClinicalDiagnosis() {
    this.clinicalDiagnosis = null;
  }

  /** Returns true if field clinicalDiagnosis is set (has been assigned a value) and false otherwise */
  public boolean isSetClinicalDiagnosis() {
    return this.clinicalDiagnosis != null;
  }

  public void setClinicalDiagnosisIsSet(boolean value) {
    if (!value) {
      this.clinicalDiagnosis = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ThriftSectionProblemData setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getEffectiveStartDate() {
    return this.effectiveStartDate;
  }

  public ThriftSectionProblemData setEffectiveStartDate(String effectiveStartDate) {
    this.effectiveStartDate = effectiveStartDate;
    return this;
  }

  public void unsetEffectiveStartDate() {
    this.effectiveStartDate = null;
  }

  /** Returns true if field effectiveStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectiveStartDate() {
    return this.effectiveStartDate != null;
  }

  public void setEffectiveStartDateIsSet(boolean value) {
    if (!value) {
      this.effectiveStartDate = null;
    }
  }

  public String getEffectiveEndDate() {
    return this.effectiveEndDate;
  }

  public ThriftSectionProblemData setEffectiveEndDate(String effectiveEndDate) {
    this.effectiveEndDate = effectiveEndDate;
    return this;
  }

  public void unsetEffectiveEndDate() {
    this.effectiveEndDate = null;
  }

  /** Returns true if field effectiveEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectiveEndDate() {
    return this.effectiveEndDate != null;
  }

  public void setEffectiveEndDateIsSet(boolean value) {
    if (!value) {
      this.effectiveEndDate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DISEASE_GROUP:
      if (value == null) {
        unsetDiseaseGroup();
      } else {
        setDiseaseGroup((String)value);
      }
      break;

    case DISEASE:
      if (value == null) {
        unsetDisease();
      } else {
        setDisease((String)value);
      }
      break;

    case CLINICAL_DIAGNOSIS:
      if (value == null) {
        unsetClinicalDiagnosis();
      } else {
        setClinicalDiagnosis((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case EFFECTIVE_START_DATE:
      if (value == null) {
        unsetEffectiveStartDate();
      } else {
        setEffectiveStartDate((String)value);
      }
      break;

    case EFFECTIVE_END_DATE:
      if (value == null) {
        unsetEffectiveEndDate();
      } else {
        setEffectiveEndDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DISEASE_GROUP:
      return getDiseaseGroup();

    case DISEASE:
      return getDisease();

    case CLINICAL_DIAGNOSIS:
      return getClinicalDiagnosis();

    case STATUS:
      return getStatus();

    case EFFECTIVE_START_DATE:
      return getEffectiveStartDate();

    case EFFECTIVE_END_DATE:
      return getEffectiveEndDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DISEASE_GROUP:
      return isSetDiseaseGroup();
    case DISEASE:
      return isSetDisease();
    case CLINICAL_DIAGNOSIS:
      return isSetClinicalDiagnosis();
    case STATUS:
      return isSetStatus();
    case EFFECTIVE_START_DATE:
      return isSetEffectiveStartDate();
    case EFFECTIVE_END_DATE:
      return isSetEffectiveEndDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSectionProblemData)
      return this.equals((ThriftSectionProblemData)that);
    return false;
  }

  public boolean equals(ThriftSectionProblemData that) {
    if (that == null)
      return false;

    boolean this_present_diseaseGroup = true && this.isSetDiseaseGroup();
    boolean that_present_diseaseGroup = true && that.isSetDiseaseGroup();
    if (this_present_diseaseGroup || that_present_diseaseGroup) {
      if (!(this_present_diseaseGroup && that_present_diseaseGroup))
        return false;
      if (!this.diseaseGroup.equals(that.diseaseGroup))
        return false;
    }

    boolean this_present_disease = true && this.isSetDisease();
    boolean that_present_disease = true && that.isSetDisease();
    if (this_present_disease || that_present_disease) {
      if (!(this_present_disease && that_present_disease))
        return false;
      if (!this.disease.equals(that.disease))
        return false;
    }

    boolean this_present_clinicalDiagnosis = true && this.isSetClinicalDiagnosis();
    boolean that_present_clinicalDiagnosis = true && that.isSetClinicalDiagnosis();
    if (this_present_clinicalDiagnosis || that_present_clinicalDiagnosis) {
      if (!(this_present_clinicalDiagnosis && that_present_clinicalDiagnosis))
        return false;
      if (!this.clinicalDiagnosis.equals(that.clinicalDiagnosis))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_effectiveStartDate = true && this.isSetEffectiveStartDate();
    boolean that_present_effectiveStartDate = true && that.isSetEffectiveStartDate();
    if (this_present_effectiveStartDate || that_present_effectiveStartDate) {
      if (!(this_present_effectiveStartDate && that_present_effectiveStartDate))
        return false;
      if (!this.effectiveStartDate.equals(that.effectiveStartDate))
        return false;
    }

    boolean this_present_effectiveEndDate = true && this.isSetEffectiveEndDate();
    boolean that_present_effectiveEndDate = true && that.isSetEffectiveEndDate();
    if (this_present_effectiveEndDate || that_present_effectiveEndDate) {
      if (!(this_present_effectiveEndDate && that_present_effectiveEndDate))
        return false;
      if (!this.effectiveEndDate.equals(that.effectiveEndDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_diseaseGroup = true && (isSetDiseaseGroup());
    list.add(present_diseaseGroup);
    if (present_diseaseGroup)
      list.add(diseaseGroup);

    boolean present_disease = true && (isSetDisease());
    list.add(present_disease);
    if (present_disease)
      list.add(disease);

    boolean present_clinicalDiagnosis = true && (isSetClinicalDiagnosis());
    list.add(present_clinicalDiagnosis);
    if (present_clinicalDiagnosis)
      list.add(clinicalDiagnosis);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_effectiveStartDate = true && (isSetEffectiveStartDate());
    list.add(present_effectiveStartDate);
    if (present_effectiveStartDate)
      list.add(effectiveStartDate);

    boolean present_effectiveEndDate = true && (isSetEffectiveEndDate());
    list.add(present_effectiveEndDate);
    if (present_effectiveEndDate)
      list.add(effectiveEndDate);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSectionProblemData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDiseaseGroup()).compareTo(other.isSetDiseaseGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiseaseGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diseaseGroup, other.diseaseGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisease()).compareTo(other.isSetDisease());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisease()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disease, other.disease);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClinicalDiagnosis()).compareTo(other.isSetClinicalDiagnosis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClinicalDiagnosis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clinicalDiagnosis, other.clinicalDiagnosis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectiveStartDate()).compareTo(other.isSetEffectiveStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectiveStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectiveStartDate, other.effectiveStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectiveEndDate()).compareTo(other.isSetEffectiveEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectiveEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectiveEndDate, other.effectiveEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSectionProblemData(");
    boolean first = true;

    sb.append("diseaseGroup:");
    if (this.diseaseGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.diseaseGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("disease:");
    if (this.disease == null) {
      sb.append("null");
    } else {
      sb.append(this.disease);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clinicalDiagnosis:");
    if (this.clinicalDiagnosis == null) {
      sb.append("null");
    } else {
      sb.append(this.clinicalDiagnosis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("effectiveStartDate:");
    if (this.effectiveStartDate == null) {
      sb.append("null");
    } else {
      sb.append(this.effectiveStartDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("effectiveEndDate:");
    if (this.effectiveEndDate == null) {
      sb.append("null");
    } else {
      sb.append(this.effectiveEndDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSectionProblemDataStandardSchemeFactory implements SchemeFactory {
    public ThriftSectionProblemDataStandardScheme getScheme() {
      return new ThriftSectionProblemDataStandardScheme();
    }
  }

  private static class ThriftSectionProblemDataStandardScheme extends StandardScheme<ThriftSectionProblemData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSectionProblemData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DISEASE_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.diseaseGroup = iprot.readString();
              struct.setDiseaseGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISEASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.disease = iprot.readString();
              struct.setDiseaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLINICAL_DIAGNOSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clinicalDiagnosis = iprot.readString();
              struct.setClinicalDiagnosisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EFFECTIVE_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effectiveStartDate = iprot.readString();
              struct.setEffectiveStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EFFECTIVE_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effectiveEndDate = iprot.readString();
              struct.setEffectiveEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSectionProblemData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.diseaseGroup != null) {
        oprot.writeFieldBegin(DISEASE_GROUP_FIELD_DESC);
        oprot.writeString(struct.diseaseGroup);
        oprot.writeFieldEnd();
      }
      if (struct.disease != null) {
        oprot.writeFieldBegin(DISEASE_FIELD_DESC);
        oprot.writeString(struct.disease);
        oprot.writeFieldEnd();
      }
      if (struct.clinicalDiagnosis != null) {
        oprot.writeFieldBegin(CLINICAL_DIAGNOSIS_FIELD_DESC);
        oprot.writeString(struct.clinicalDiagnosis);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.effectiveStartDate != null) {
        oprot.writeFieldBegin(EFFECTIVE_START_DATE_FIELD_DESC);
        oprot.writeString(struct.effectiveStartDate);
        oprot.writeFieldEnd();
      }
      if (struct.effectiveEndDate != null) {
        oprot.writeFieldBegin(EFFECTIVE_END_DATE_FIELD_DESC);
        oprot.writeString(struct.effectiveEndDate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSectionProblemDataTupleSchemeFactory implements SchemeFactory {
    public ThriftSectionProblemDataTupleScheme getScheme() {
      return new ThriftSectionProblemDataTupleScheme();
    }
  }

  private static class ThriftSectionProblemDataTupleScheme extends TupleScheme<ThriftSectionProblemData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSectionProblemData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDiseaseGroup()) {
        optionals.set(0);
      }
      if (struct.isSetDisease()) {
        optionals.set(1);
      }
      if (struct.isSetClinicalDiagnosis()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetEffectiveStartDate()) {
        optionals.set(4);
      }
      if (struct.isSetEffectiveEndDate()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetDiseaseGroup()) {
        oprot.writeString(struct.diseaseGroup);
      }
      if (struct.isSetDisease()) {
        oprot.writeString(struct.disease);
      }
      if (struct.isSetClinicalDiagnosis()) {
        oprot.writeString(struct.clinicalDiagnosis);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetEffectiveStartDate()) {
        oprot.writeString(struct.effectiveStartDate);
      }
      if (struct.isSetEffectiveEndDate()) {
        oprot.writeString(struct.effectiveEndDate);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSectionProblemData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.diseaseGroup = iprot.readString();
        struct.setDiseaseGroupIsSet(true);
      }
      if (incoming.get(1)) {
        struct.disease = iprot.readString();
        struct.setDiseaseIsSet(true);
      }
      if (incoming.get(2)) {
        struct.clinicalDiagnosis = iprot.readString();
        struct.setClinicalDiagnosisIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.effectiveStartDate = iprot.readString();
        struct.setEffectiveStartDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.effectiveEndDate = iprot.readString();
        struct.setEffectiveEndDateIsSet(true);
      }
    }
  }

}

