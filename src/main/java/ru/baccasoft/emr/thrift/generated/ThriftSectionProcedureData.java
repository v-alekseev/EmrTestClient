/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-17")
public class ThriftSectionProcedureData implements org.apache.thrift.TBase<ThriftSectionProcedureData, ThriftSectionProcedureData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSectionProcedureData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSectionProcedureData");

  private static final org.apache.thrift.protocol.TField BODY_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("bodySystem", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PROCEDURE_FIELD_DESC = new org.apache.thrift.protocol.TField("procedure", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField P_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pDescription", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSectionProcedureDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSectionProcedureDataTupleSchemeFactory());
  }

  public String bodySystem; // required
  public String procedure; // required
  public String month; // required
  public String year; // required
  public String status; // required
  public String pDescription; // required
  public String date; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BODY_SYSTEM((short)1, "bodySystem"),
    PROCEDURE((short)2, "procedure"),
    MONTH((short)3, "month"),
    YEAR((short)4, "year"),
    STATUS((short)5, "status"),
    P_DESCRIPTION((short)6, "pDescription"),
    DATE((short)7, "date");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BODY_SYSTEM
          return BODY_SYSTEM;
        case 2: // PROCEDURE
          return PROCEDURE;
        case 3: // MONTH
          return MONTH;
        case 4: // YEAR
          return YEAR;
        case 5: // STATUS
          return STATUS;
        case 6: // P_DESCRIPTION
          return P_DESCRIPTION;
        case 7: // DATE
          return DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BODY_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("bodySystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCEDURE, new org.apache.thrift.meta_data.FieldMetaData("procedure", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("pDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSectionProcedureData.class, metaDataMap);
  }

  public ThriftSectionProcedureData() {
  }

  public ThriftSectionProcedureData(
    String bodySystem,
    String procedure,
    String month,
    String year,
    String status,
    String pDescription,
    String date)
  {
    this();
    this.bodySystem = bodySystem;
    this.procedure = procedure;
    this.month = month;
    this.year = year;
    this.status = status;
    this.pDescription = pDescription;
    this.date = date;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSectionProcedureData(ThriftSectionProcedureData other) {
    if (other.isSetBodySystem()) {
      this.bodySystem = other.bodySystem;
    }
    if (other.isSetProcedure()) {
      this.procedure = other.procedure;
    }
    if (other.isSetMonth()) {
      this.month = other.month;
    }
    if (other.isSetYear()) {
      this.year = other.year;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetPDescription()) {
      this.pDescription = other.pDescription;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
  }

  public ThriftSectionProcedureData deepCopy() {
    return new ThriftSectionProcedureData(this);
  }

  @Override
  public void clear() {
    this.bodySystem = null;
    this.procedure = null;
    this.month = null;
    this.year = null;
    this.status = null;
    this.pDescription = null;
    this.date = null;
  }

  public String getBodySystem() {
    return this.bodySystem;
  }

  public ThriftSectionProcedureData setBodySystem(String bodySystem) {
    this.bodySystem = bodySystem;
    return this;
  }

  public void unsetBodySystem() {
    this.bodySystem = null;
  }

  /** Returns true if field bodySystem is set (has been assigned a value) and false otherwise */
  public boolean isSetBodySystem() {
    return this.bodySystem != null;
  }

  public void setBodySystemIsSet(boolean value) {
    if (!value) {
      this.bodySystem = null;
    }
  }

  public String getProcedure() {
    return this.procedure;
  }

  public ThriftSectionProcedureData setProcedure(String procedure) {
    this.procedure = procedure;
    return this;
  }

  public void unsetProcedure() {
    this.procedure = null;
  }

  /** Returns true if field procedure is set (has been assigned a value) and false otherwise */
  public boolean isSetProcedure() {
    return this.procedure != null;
  }

  public void setProcedureIsSet(boolean value) {
    if (!value) {
      this.procedure = null;
    }
  }

  public String getMonth() {
    return this.month;
  }

  public ThriftSectionProcedureData setMonth(String month) {
    this.month = month;
    return this;
  }

  public void unsetMonth() {
    this.month = null;
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return this.month != null;
  }

  public void setMonthIsSet(boolean value) {
    if (!value) {
      this.month = null;
    }
  }

  public String getYear() {
    return this.year;
  }

  public ThriftSectionProcedureData setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ThriftSectionProcedureData setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getPDescription() {
    return this.pDescription;
  }

  public ThriftSectionProcedureData setPDescription(String pDescription) {
    this.pDescription = pDescription;
    return this;
  }

  public void unsetPDescription() {
    this.pDescription = null;
  }

  /** Returns true if field pDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetPDescription() {
    return this.pDescription != null;
  }

  public void setPDescriptionIsSet(boolean value) {
    if (!value) {
      this.pDescription = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public ThriftSectionProcedureData setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BODY_SYSTEM:
      if (value == null) {
        unsetBodySystem();
      } else {
        setBodySystem((String)value);
      }
      break;

    case PROCEDURE:
      if (value == null) {
        unsetProcedure();
      } else {
        setProcedure((String)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case P_DESCRIPTION:
      if (value == null) {
        unsetPDescription();
      } else {
        setPDescription((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BODY_SYSTEM:
      return getBodySystem();

    case PROCEDURE:
      return getProcedure();

    case MONTH:
      return getMonth();

    case YEAR:
      return getYear();

    case STATUS:
      return getStatus();

    case P_DESCRIPTION:
      return getPDescription();

    case DATE:
      return getDate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BODY_SYSTEM:
      return isSetBodySystem();
    case PROCEDURE:
      return isSetProcedure();
    case MONTH:
      return isSetMonth();
    case YEAR:
      return isSetYear();
    case STATUS:
      return isSetStatus();
    case P_DESCRIPTION:
      return isSetPDescription();
    case DATE:
      return isSetDate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSectionProcedureData)
      return this.equals((ThriftSectionProcedureData)that);
    return false;
  }

  public boolean equals(ThriftSectionProcedureData that) {
    if (that == null)
      return false;

    boolean this_present_bodySystem = true && this.isSetBodySystem();
    boolean that_present_bodySystem = true && that.isSetBodySystem();
    if (this_present_bodySystem || that_present_bodySystem) {
      if (!(this_present_bodySystem && that_present_bodySystem))
        return false;
      if (!this.bodySystem.equals(that.bodySystem))
        return false;
    }

    boolean this_present_procedure = true && this.isSetProcedure();
    boolean that_present_procedure = true && that.isSetProcedure();
    if (this_present_procedure || that_present_procedure) {
      if (!(this_present_procedure && that_present_procedure))
        return false;
      if (!this.procedure.equals(that.procedure))
        return false;
    }

    boolean this_present_month = true && this.isSetMonth();
    boolean that_present_month = true && that.isSetMonth();
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (!this.month.equals(that.month))
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_pDescription = true && this.isSetPDescription();
    boolean that_present_pDescription = true && that.isSetPDescription();
    if (this_present_pDescription || that_present_pDescription) {
      if (!(this_present_pDescription && that_present_pDescription))
        return false;
      if (!this.pDescription.equals(that.pDescription))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bodySystem = true && (isSetBodySystem());
    list.add(present_bodySystem);
    if (present_bodySystem)
      list.add(bodySystem);

    boolean present_procedure = true && (isSetProcedure());
    list.add(present_procedure);
    if (present_procedure)
      list.add(procedure);

    boolean present_month = true && (isSetMonth());
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_year = true && (isSetYear());
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_pDescription = true && (isSetPDescription());
    list.add(present_pDescription);
    if (present_pDescription)
      list.add(pDescription);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSectionProcedureData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBodySystem()).compareTo(other.isSetBodySystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBodySystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bodySystem, other.bodySystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProcedure()).compareTo(other.isSetProcedure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcedure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.procedure, other.procedure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPDescription()).compareTo(other.isSetPDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pDescription, other.pDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSectionProcedureData(");
    boolean first = true;

    sb.append("bodySystem:");
    if (this.bodySystem == null) {
      sb.append("null");
    } else {
      sb.append(this.bodySystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("procedure:");
    if (this.procedure == null) {
      sb.append("null");
    } else {
      sb.append(this.procedure);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    if (this.month == null) {
      sb.append("null");
    } else {
      sb.append(this.month);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pDescription:");
    if (this.pDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.pDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSectionProcedureDataStandardSchemeFactory implements SchemeFactory {
    public ThriftSectionProcedureDataStandardScheme getScheme() {
      return new ThriftSectionProcedureDataStandardScheme();
    }
  }

  private static class ThriftSectionProcedureDataStandardScheme extends StandardScheme<ThriftSectionProcedureData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSectionProcedureData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BODY_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bodySystem = iprot.readString();
              struct.setBodySystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PROCEDURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.procedure = iprot.readString();
              struct.setProcedureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.month = iprot.readString();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // P_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pDescription = iprot.readString();
              struct.setPDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSectionProcedureData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.bodySystem != null) {
        oprot.writeFieldBegin(BODY_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.bodySystem);
        oprot.writeFieldEnd();
      }
      if (struct.procedure != null) {
        oprot.writeFieldBegin(PROCEDURE_FIELD_DESC);
        oprot.writeString(struct.procedure);
        oprot.writeFieldEnd();
      }
      if (struct.month != null) {
        oprot.writeFieldBegin(MONTH_FIELD_DESC);
        oprot.writeString(struct.month);
        oprot.writeFieldEnd();
      }
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.pDescription != null) {
        oprot.writeFieldBegin(P_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.pDescription);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSectionProcedureDataTupleSchemeFactory implements SchemeFactory {
    public ThriftSectionProcedureDataTupleScheme getScheme() {
      return new ThriftSectionProcedureDataTupleScheme();
    }
  }

  private static class ThriftSectionProcedureDataTupleScheme extends TupleScheme<ThriftSectionProcedureData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSectionProcedureData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBodySystem()) {
        optionals.set(0);
      }
      if (struct.isSetProcedure()) {
        optionals.set(1);
      }
      if (struct.isSetMonth()) {
        optionals.set(2);
      }
      if (struct.isSetYear()) {
        optionals.set(3);
      }
      if (struct.isSetStatus()) {
        optionals.set(4);
      }
      if (struct.isSetPDescription()) {
        optionals.set(5);
      }
      if (struct.isSetDate()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBodySystem()) {
        oprot.writeString(struct.bodySystem);
      }
      if (struct.isSetProcedure()) {
        oprot.writeString(struct.procedure);
      }
      if (struct.isSetMonth()) {
        oprot.writeString(struct.month);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetPDescription()) {
        oprot.writeString(struct.pDescription);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSectionProcedureData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.bodySystem = iprot.readString();
        struct.setBodySystemIsSet(true);
      }
      if (incoming.get(1)) {
        struct.procedure = iprot.readString();
        struct.setProcedureIsSet(true);
      }
      if (incoming.get(2)) {
        struct.month = iprot.readString();
        struct.setMonthIsSet(true);
      }
      if (incoming.get(3)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
      if (incoming.get(4)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.pDescription = iprot.readString();
        struct.setPDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
    }
  }

}

