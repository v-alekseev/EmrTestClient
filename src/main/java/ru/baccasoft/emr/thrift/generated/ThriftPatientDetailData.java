/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-01")
public class ThriftPatientDetailData implements org.apache.thrift.TBase<ThriftPatientDetailData, ThriftPatientDetailData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftPatientDetailData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftPatientDetailData");

  private static final org.apache.thrift.protocol.TField PATIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("patient", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("photo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FAMILY_DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("familyDoctor", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField FORM100_FIELD_DESC = new org.apache.thrift.protocol.TField("form100", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftPatientDetailDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftPatientDetailDataTupleSchemeFactory());
  }

  public ThriftPatientData patient; // required
  public String photo; // required
  public ThriftFamilyDoctorData familyDoctor; // required
  public ThriftForm100Data form100; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATIENT((short)1, "patient"),
    PHOTO((short)2, "photo"),
    FAMILY_DOCTOR((short)3, "familyDoctor"),
    FORM100((short)4, "form100");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATIENT
          return PATIENT;
        case 2: // PHOTO
          return PHOTO;
        case 3: // FAMILY_DOCTOR
          return FAMILY_DOCTOR;
        case 4: // FORM100
          return FORM100;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATIENT, new org.apache.thrift.meta_data.FieldMetaData("patient", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftPatientData.class)));
    tmpMap.put(_Fields.PHOTO, new org.apache.thrift.meta_data.FieldMetaData("photo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAMILY_DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("familyDoctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftFamilyDoctorData.class)));
    tmpMap.put(_Fields.FORM100, new org.apache.thrift.meta_data.FieldMetaData("form100", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftForm100Data.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftPatientDetailData.class, metaDataMap);
  }

  public ThriftPatientDetailData() {
  }

  public ThriftPatientDetailData(
    ThriftPatientData patient,
    String photo,
    ThriftFamilyDoctorData familyDoctor,
    ThriftForm100Data form100)
  {
    this();
    this.patient = patient;
    this.photo = photo;
    this.familyDoctor = familyDoctor;
    this.form100 = form100;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftPatientDetailData(ThriftPatientDetailData other) {
    if (other.isSetPatient()) {
      this.patient = new ThriftPatientData(other.patient);
    }
    if (other.isSetPhoto()) {
      this.photo = other.photo;
    }
    if (other.isSetFamilyDoctor()) {
      this.familyDoctor = new ThriftFamilyDoctorData(other.familyDoctor);
    }
    if (other.isSetForm100()) {
      this.form100 = new ThriftForm100Data(other.form100);
    }
  }

  public ThriftPatientDetailData deepCopy() {
    return new ThriftPatientDetailData(this);
  }

  @Override
  public void clear() {
    this.patient = null;
    this.photo = null;
    this.familyDoctor = null;
    this.form100 = null;
  }

  public ThriftPatientData getPatient() {
    return this.patient;
  }

  public ThriftPatientDetailData setPatient(ThriftPatientData patient) {
    this.patient = patient;
    return this;
  }

  public void unsetPatient() {
    this.patient = null;
  }

  /** Returns true if field patient is set (has been assigned a value) and false otherwise */
  public boolean isSetPatient() {
    return this.patient != null;
  }

  public void setPatientIsSet(boolean value) {
    if (!value) {
      this.patient = null;
    }
  }

  public String getPhoto() {
    return this.photo;
  }

  public ThriftPatientDetailData setPhoto(String photo) {
    this.photo = photo;
    return this;
  }

  public void unsetPhoto() {
    this.photo = null;
  }

  /** Returns true if field photo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto() {
    return this.photo != null;
  }

  public void setPhotoIsSet(boolean value) {
    if (!value) {
      this.photo = null;
    }
  }

  public ThriftFamilyDoctorData getFamilyDoctor() {
    return this.familyDoctor;
  }

  public ThriftPatientDetailData setFamilyDoctor(ThriftFamilyDoctorData familyDoctor) {
    this.familyDoctor = familyDoctor;
    return this;
  }

  public void unsetFamilyDoctor() {
    this.familyDoctor = null;
  }

  /** Returns true if field familyDoctor is set (has been assigned a value) and false otherwise */
  public boolean isSetFamilyDoctor() {
    return this.familyDoctor != null;
  }

  public void setFamilyDoctorIsSet(boolean value) {
    if (!value) {
      this.familyDoctor = null;
    }
  }

  public ThriftForm100Data getForm100() {
    return this.form100;
  }

  public ThriftPatientDetailData setForm100(ThriftForm100Data form100) {
    this.form100 = form100;
    return this;
  }

  public void unsetForm100() {
    this.form100 = null;
  }

  /** Returns true if field form100 is set (has been assigned a value) and false otherwise */
  public boolean isSetForm100() {
    return this.form100 != null;
  }

  public void setForm100IsSet(boolean value) {
    if (!value) {
      this.form100 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATIENT:
      if (value == null) {
        unsetPatient();
      } else {
        setPatient((ThriftPatientData)value);
      }
      break;

    case PHOTO:
      if (value == null) {
        unsetPhoto();
      } else {
        setPhoto((String)value);
      }
      break;

    case FAMILY_DOCTOR:
      if (value == null) {
        unsetFamilyDoctor();
      } else {
        setFamilyDoctor((ThriftFamilyDoctorData)value);
      }
      break;

    case FORM100:
      if (value == null) {
        unsetForm100();
      } else {
        setForm100((ThriftForm100Data)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATIENT:
      return getPatient();

    case PHOTO:
      return getPhoto();

    case FAMILY_DOCTOR:
      return getFamilyDoctor();

    case FORM100:
      return getForm100();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATIENT:
      return isSetPatient();
    case PHOTO:
      return isSetPhoto();
    case FAMILY_DOCTOR:
      return isSetFamilyDoctor();
    case FORM100:
      return isSetForm100();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftPatientDetailData)
      return this.equals((ThriftPatientDetailData)that);
    return false;
  }

  public boolean equals(ThriftPatientDetailData that) {
    if (that == null)
      return false;

    boolean this_present_patient = true && this.isSetPatient();
    boolean that_present_patient = true && that.isSetPatient();
    if (this_present_patient || that_present_patient) {
      if (!(this_present_patient && that_present_patient))
        return false;
      if (!this.patient.equals(that.patient))
        return false;
    }

    boolean this_present_photo = true && this.isSetPhoto();
    boolean that_present_photo = true && that.isSetPhoto();
    if (this_present_photo || that_present_photo) {
      if (!(this_present_photo && that_present_photo))
        return false;
      if (!this.photo.equals(that.photo))
        return false;
    }

    boolean this_present_familyDoctor = true && this.isSetFamilyDoctor();
    boolean that_present_familyDoctor = true && that.isSetFamilyDoctor();
    if (this_present_familyDoctor || that_present_familyDoctor) {
      if (!(this_present_familyDoctor && that_present_familyDoctor))
        return false;
      if (!this.familyDoctor.equals(that.familyDoctor))
        return false;
    }

    boolean this_present_form100 = true && this.isSetForm100();
    boolean that_present_form100 = true && that.isSetForm100();
    if (this_present_form100 || that_present_form100) {
      if (!(this_present_form100 && that_present_form100))
        return false;
      if (!this.form100.equals(that.form100))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_patient = true && (isSetPatient());
    list.add(present_patient);
    if (present_patient)
      list.add(patient);

    boolean present_photo = true && (isSetPhoto());
    list.add(present_photo);
    if (present_photo)
      list.add(photo);

    boolean present_familyDoctor = true && (isSetFamilyDoctor());
    list.add(present_familyDoctor);
    if (present_familyDoctor)
      list.add(familyDoctor);

    boolean present_form100 = true && (isSetForm100());
    list.add(present_form100);
    if (present_form100)
      list.add(form100);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftPatientDetailData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPatient()).compareTo(other.isSetPatient());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatient()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patient, other.patient);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoto()).compareTo(other.isSetPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo, other.photo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFamilyDoctor()).compareTo(other.isSetFamilyDoctor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFamilyDoctor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.familyDoctor, other.familyDoctor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForm100()).compareTo(other.isSetForm100());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForm100()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form100, other.form100);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftPatientDetailData(");
    boolean first = true;

    sb.append("patient:");
    if (this.patient == null) {
      sb.append("null");
    } else {
      sb.append(this.patient);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photo:");
    if (this.photo == null) {
      sb.append("null");
    } else {
      sb.append(this.photo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("familyDoctor:");
    if (this.familyDoctor == null) {
      sb.append("null");
    } else {
      sb.append(this.familyDoctor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("form100:");
    if (this.form100 == null) {
      sb.append("null");
    } else {
      sb.append(this.form100);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (patient != null) {
      patient.validate();
    }
    if (familyDoctor != null) {
      familyDoctor.validate();
    }
    if (form100 != null) {
      form100.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftPatientDetailDataStandardSchemeFactory implements SchemeFactory {
    public ThriftPatientDetailDataStandardScheme getScheme() {
      return new ThriftPatientDetailDataStandardScheme();
    }
  }

  private static class ThriftPatientDetailDataStandardScheme extends StandardScheme<ThriftPatientDetailData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftPatientDetailData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATIENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.patient = new ThriftPatientData();
              struct.patient.read(iprot);
              struct.setPatientIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo = iprot.readString();
              struct.setPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAMILY_DOCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.familyDoctor = new ThriftFamilyDoctorData();
              struct.familyDoctor.read(iprot);
              struct.setFamilyDoctorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FORM100
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.form100 = new ThriftForm100Data();
              struct.form100.read(iprot);
              struct.setForm100IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftPatientDetailData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.patient != null) {
        oprot.writeFieldBegin(PATIENT_FIELD_DESC);
        struct.patient.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.photo != null) {
        oprot.writeFieldBegin(PHOTO_FIELD_DESC);
        oprot.writeString(struct.photo);
        oprot.writeFieldEnd();
      }
      if (struct.familyDoctor != null) {
        oprot.writeFieldBegin(FAMILY_DOCTOR_FIELD_DESC);
        struct.familyDoctor.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.form100 != null) {
        oprot.writeFieldBegin(FORM100_FIELD_DESC);
        struct.form100.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftPatientDetailDataTupleSchemeFactory implements SchemeFactory {
    public ThriftPatientDetailDataTupleScheme getScheme() {
      return new ThriftPatientDetailDataTupleScheme();
    }
  }

  private static class ThriftPatientDetailDataTupleScheme extends TupleScheme<ThriftPatientDetailData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftPatientDetailData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPatient()) {
        optionals.set(0);
      }
      if (struct.isSetPhoto()) {
        optionals.set(1);
      }
      if (struct.isSetFamilyDoctor()) {
        optionals.set(2);
      }
      if (struct.isSetForm100()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPatient()) {
        struct.patient.write(oprot);
      }
      if (struct.isSetPhoto()) {
        oprot.writeString(struct.photo);
      }
      if (struct.isSetFamilyDoctor()) {
        struct.familyDoctor.write(oprot);
      }
      if (struct.isSetForm100()) {
        struct.form100.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftPatientDetailData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.patient = new ThriftPatientData();
        struct.patient.read(iprot);
        struct.setPatientIsSet(true);
      }
      if (incoming.get(1)) {
        struct.photo = iprot.readString();
        struct.setPhotoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.familyDoctor = new ThriftFamilyDoctorData();
        struct.familyDoctor.read(iprot);
        struct.setFamilyDoctorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.form100 = new ThriftForm100Data();
        struct.form100.read(iprot);
        struct.setForm100IsSet(true);
      }
    }
  }

}

