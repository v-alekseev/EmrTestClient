/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-15")
public class ThriftPatientData implements org.apache.thrift.TBase<ThriftPatientData, ThriftPatientData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftPatientData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftPatientData");

  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SURNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("surname", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_OF_BIRTH_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfBirth", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftPatientDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftPatientDataTupleSchemeFactory());
  }

  public String patientID; // required
  public String surname; // required
  public String name; // required
  public String dateOfBirth; // required
  public String sex; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATIENT_ID((short)1, "patientID"),
    SURNAME((short)2, "surname"),
    NAME((short)3, "name"),
    DATE_OF_BIRTH((short)4, "dateOfBirth"),
    SEX((short)5, "sex");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATIENT_ID
          return PATIENT_ID;
        case 2: // SURNAME
          return SURNAME;
        case 3: // NAME
          return NAME;
        case 4: // DATE_OF_BIRTH
          return DATE_OF_BIRTH;
        case 5: // SEX
          return SEX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SURNAME, new org.apache.thrift.meta_data.FieldMetaData("surname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_BIRTH, new org.apache.thrift.meta_data.FieldMetaData("dateOfBirth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftPatientData.class, metaDataMap);
  }

  public ThriftPatientData() {
  }

  public ThriftPatientData(
    String patientID,
    String surname,
    String name,
    String dateOfBirth,
    String sex)
  {
    this();
    this.patientID = patientID;
    this.surname = surname;
    this.name = name;
    this.dateOfBirth = dateOfBirth;
    this.sex = sex;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftPatientData(ThriftPatientData other) {
    if (other.isSetPatientID()) {
      this.patientID = other.patientID;
    }
    if (other.isSetSurname()) {
      this.surname = other.surname;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDateOfBirth()) {
      this.dateOfBirth = other.dateOfBirth;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
  }

  public ThriftPatientData deepCopy() {
    return new ThriftPatientData(this);
  }

  @Override
  public void clear() {
    this.patientID = null;
    this.surname = null;
    this.name = null;
    this.dateOfBirth = null;
    this.sex = null;
  }

  public String getPatientID() {
    return this.patientID;
  }

  public ThriftPatientData setPatientID(String patientID) {
    this.patientID = patientID;
    return this;
  }

  public void unsetPatientID() {
    this.patientID = null;
  }

  /** Returns true if field patientID is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientID() {
    return this.patientID != null;
  }

  public void setPatientIDIsSet(boolean value) {
    if (!value) {
      this.patientID = null;
    }
  }

  public String getSurname() {
    return this.surname;
  }

  public ThriftPatientData setSurname(String surname) {
    this.surname = surname;
    return this;
  }

  public void unsetSurname() {
    this.surname = null;
  }

  /** Returns true if field surname is set (has been assigned a value) and false otherwise */
  public boolean isSetSurname() {
    return this.surname != null;
  }

  public void setSurnameIsSet(boolean value) {
    if (!value) {
      this.surname = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public ThriftPatientData setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDateOfBirth() {
    return this.dateOfBirth;
  }

  public ThriftPatientData setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  public void unsetDateOfBirth() {
    this.dateOfBirth = null;
  }

  /** Returns true if field dateOfBirth is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfBirth() {
    return this.dateOfBirth != null;
  }

  public void setDateOfBirthIsSet(boolean value) {
    if (!value) {
      this.dateOfBirth = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public ThriftPatientData setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATIENT_ID:
      if (value == null) {
        unsetPatientID();
      } else {
        setPatientID((String)value);
      }
      break;

    case SURNAME:
      if (value == null) {
        unsetSurname();
      } else {
        setSurname((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DATE_OF_BIRTH:
      if (value == null) {
        unsetDateOfBirth();
      } else {
        setDateOfBirth((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATIENT_ID:
      return getPatientID();

    case SURNAME:
      return getSurname();

    case NAME:
      return getName();

    case DATE_OF_BIRTH:
      return getDateOfBirth();

    case SEX:
      return getSex();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATIENT_ID:
      return isSetPatientID();
    case SURNAME:
      return isSetSurname();
    case NAME:
      return isSetName();
    case DATE_OF_BIRTH:
      return isSetDateOfBirth();
    case SEX:
      return isSetSex();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftPatientData)
      return this.equals((ThriftPatientData)that);
    return false;
  }

  public boolean equals(ThriftPatientData that) {
    if (that == null)
      return false;

    boolean this_present_patientID = true && this.isSetPatientID();
    boolean that_present_patientID = true && that.isSetPatientID();
    if (this_present_patientID || that_present_patientID) {
      if (!(this_present_patientID && that_present_patientID))
        return false;
      if (!this.patientID.equals(that.patientID))
        return false;
    }

    boolean this_present_surname = true && this.isSetSurname();
    boolean that_present_surname = true && that.isSetSurname();
    if (this_present_surname || that_present_surname) {
      if (!(this_present_surname && that_present_surname))
        return false;
      if (!this.surname.equals(that.surname))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_dateOfBirth = true && this.isSetDateOfBirth();
    boolean that_present_dateOfBirth = true && that.isSetDateOfBirth();
    if (this_present_dateOfBirth || that_present_dateOfBirth) {
      if (!(this_present_dateOfBirth && that_present_dateOfBirth))
        return false;
      if (!this.dateOfBirth.equals(that.dateOfBirth))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_patientID = true && (isSetPatientID());
    list.add(present_patientID);
    if (present_patientID)
      list.add(patientID);

    boolean present_surname = true && (isSetSurname());
    list.add(present_surname);
    if (present_surname)
      list.add(surname);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_dateOfBirth = true && (isSetDateOfBirth());
    list.add(present_dateOfBirth);
    if (present_dateOfBirth)
      list.add(dateOfBirth);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftPatientData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPatientID()).compareTo(other.isSetPatientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientID, other.patientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSurname()).compareTo(other.isSetSurname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSurname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.surname, other.surname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateOfBirth()).compareTo(other.isSetDateOfBirth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfBirth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfBirth, other.dateOfBirth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftPatientData(");
    boolean first = true;

    sb.append("patientID:");
    if (this.patientID == null) {
      sb.append("null");
    } else {
      sb.append(this.patientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("surname:");
    if (this.surname == null) {
      sb.append("null");
    } else {
      sb.append(this.surname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfBirth:");
    if (this.dateOfBirth == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfBirth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftPatientDataStandardSchemeFactory implements SchemeFactory {
    public ThriftPatientDataStandardScheme getScheme() {
      return new ThriftPatientDataStandardScheme();
    }
  }

  private static class ThriftPatientDataStandardScheme extends StandardScheme<ThriftPatientData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftPatientData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patientID = iprot.readString();
              struct.setPatientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SURNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.surname = iprot.readString();
              struct.setSurnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_OF_BIRTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateOfBirth = iprot.readString();
              struct.setDateOfBirthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftPatientData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.patientID != null) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeString(struct.patientID);
        oprot.writeFieldEnd();
      }
      if (struct.surname != null) {
        oprot.writeFieldBegin(SURNAME_FIELD_DESC);
        oprot.writeString(struct.surname);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfBirth != null) {
        oprot.writeFieldBegin(DATE_OF_BIRTH_FIELD_DESC);
        oprot.writeString(struct.dateOfBirth);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftPatientDataTupleSchemeFactory implements SchemeFactory {
    public ThriftPatientDataTupleScheme getScheme() {
      return new ThriftPatientDataTupleScheme();
    }
  }

  private static class ThriftPatientDataTupleScheme extends TupleScheme<ThriftPatientData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftPatientData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPatientID()) {
        optionals.set(0);
      }
      if (struct.isSetSurname()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDateOfBirth()) {
        optionals.set(3);
      }
      if (struct.isSetSex()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPatientID()) {
        oprot.writeString(struct.patientID);
      }
      if (struct.isSetSurname()) {
        oprot.writeString(struct.surname);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDateOfBirth()) {
        oprot.writeString(struct.dateOfBirth);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftPatientData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.patientID = iprot.readString();
        struct.setPatientIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.surname = iprot.readString();
        struct.setSurnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateOfBirth = iprot.readString();
        struct.setDateOfBirthIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
    }
  }

}

