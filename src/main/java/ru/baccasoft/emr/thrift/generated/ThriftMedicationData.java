/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-28")
public class ThriftMedicationData implements org.apache.thrift.TBase<ThriftMedicationData, ThriftMedicationData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftMedicationData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftMedicationData");

  private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("caseID", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MEDICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("medication", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOSE_FIELD_DESC = new org.apache.thrift.protocol.TField("dose", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FORM_FIELD_DESC = new org.apache.thrift.protocol.TField("form", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField INSTRUCTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("instructions", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField INSERTED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("insertedAt", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PRESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("prescription", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftMedicationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftMedicationDataTupleSchemeFactory());
  }

  public String patientID; // required
  public String caseID; // required
  public String medication; // required
  public String dose; // required
  public String form; // required
  public String instructions; // required
  public String startDate; // required
  public String endDate; // required
  public String status; // required
  public String insertedAt; // required
  public String author; // required
  public String prescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATIENT_ID((short)1, "patientID"),
    CASE_ID((short)2, "caseID"),
    MEDICATION((short)3, "medication"),
    DOSE((short)4, "dose"),
    FORM((short)5, "form"),
    INSTRUCTIONS((short)6, "instructions"),
    START_DATE((short)7, "startDate"),
    END_DATE((short)8, "endDate"),
    STATUS((short)9, "status"),
    INSERTED_AT((short)10, "insertedAt"),
    AUTHOR((short)11, "author"),
    PRESCRIPTION((short)12, "prescription");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATIENT_ID
          return PATIENT_ID;
        case 2: // CASE_ID
          return CASE_ID;
        case 3: // MEDICATION
          return MEDICATION;
        case 4: // DOSE
          return DOSE;
        case 5: // FORM
          return FORM;
        case 6: // INSTRUCTIONS
          return INSTRUCTIONS;
        case 7: // START_DATE
          return START_DATE;
        case 8: // END_DATE
          return END_DATE;
        case 9: // STATUS
          return STATUS;
        case 10: // INSERTED_AT
          return INSERTED_AT;
        case 11: // AUTHOR
          return AUTHOR;
        case 12: // PRESCRIPTION
          return PRESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASE_ID, new org.apache.thrift.meta_data.FieldMetaData("caseID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEDICATION, new org.apache.thrift.meta_data.FieldMetaData("medication", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOSE, new org.apache.thrift.meta_data.FieldMetaData("dose", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORM, new org.apache.thrift.meta_data.FieldMetaData("form", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSTRUCTIONS, new org.apache.thrift.meta_data.FieldMetaData("instructions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INSERTED_AT, new org.apache.thrift.meta_data.FieldMetaData("insertedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("prescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftMedicationData.class, metaDataMap);
  }

  public ThriftMedicationData() {
  }

  public ThriftMedicationData(
    String patientID,
    String caseID,
    String medication,
    String dose,
    String form,
    String instructions,
    String startDate,
    String endDate,
    String status,
    String insertedAt,
    String author,
    String prescription)
  {
    this();
    this.patientID = patientID;
    this.caseID = caseID;
    this.medication = medication;
    this.dose = dose;
    this.form = form;
    this.instructions = instructions;
    this.startDate = startDate;
    this.endDate = endDate;
    this.status = status;
    this.insertedAt = insertedAt;
    this.author = author;
    this.prescription = prescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftMedicationData(ThriftMedicationData other) {
    if (other.isSetPatientID()) {
      this.patientID = other.patientID;
    }
    if (other.isSetCaseID()) {
      this.caseID = other.caseID;
    }
    if (other.isSetMedication()) {
      this.medication = other.medication;
    }
    if (other.isSetDose()) {
      this.dose = other.dose;
    }
    if (other.isSetForm()) {
      this.form = other.form;
    }
    if (other.isSetInstructions()) {
      this.instructions = other.instructions;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetInsertedAt()) {
      this.insertedAt = other.insertedAt;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetPrescription()) {
      this.prescription = other.prescription;
    }
  }

  public ThriftMedicationData deepCopy() {
    return new ThriftMedicationData(this);
  }

  @Override
  public void clear() {
    this.patientID = null;
    this.caseID = null;
    this.medication = null;
    this.dose = null;
    this.form = null;
    this.instructions = null;
    this.startDate = null;
    this.endDate = null;
    this.status = null;
    this.insertedAt = null;
    this.author = null;
    this.prescription = null;
  }

  public String getPatientID() {
    return this.patientID;
  }

  public ThriftMedicationData setPatientID(String patientID) {
    this.patientID = patientID;
    return this;
  }

  public void unsetPatientID() {
    this.patientID = null;
  }

  /** Returns true if field patientID is set (has been assigned a value) and false otherwise */
  public boolean isSetPatientID() {
    return this.patientID != null;
  }

  public void setPatientIDIsSet(boolean value) {
    if (!value) {
      this.patientID = null;
    }
  }

  public String getCaseID() {
    return this.caseID;
  }

  public ThriftMedicationData setCaseID(String caseID) {
    this.caseID = caseID;
    return this;
  }

  public void unsetCaseID() {
    this.caseID = null;
  }

  /** Returns true if field caseID is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseID() {
    return this.caseID != null;
  }

  public void setCaseIDIsSet(boolean value) {
    if (!value) {
      this.caseID = null;
    }
  }

  public String getMedication() {
    return this.medication;
  }

  public ThriftMedicationData setMedication(String medication) {
    this.medication = medication;
    return this;
  }

  public void unsetMedication() {
    this.medication = null;
  }

  /** Returns true if field medication is set (has been assigned a value) and false otherwise */
  public boolean isSetMedication() {
    return this.medication != null;
  }

  public void setMedicationIsSet(boolean value) {
    if (!value) {
      this.medication = null;
    }
  }

  public String getDose() {
    return this.dose;
  }

  public ThriftMedicationData setDose(String dose) {
    this.dose = dose;
    return this;
  }

  public void unsetDose() {
    this.dose = null;
  }

  /** Returns true if field dose is set (has been assigned a value) and false otherwise */
  public boolean isSetDose() {
    return this.dose != null;
  }

  public void setDoseIsSet(boolean value) {
    if (!value) {
      this.dose = null;
    }
  }

  public String getForm() {
    return this.form;
  }

  public ThriftMedicationData setForm(String form) {
    this.form = form;
    return this;
  }

  public void unsetForm() {
    this.form = null;
  }

  /** Returns true if field form is set (has been assigned a value) and false otherwise */
  public boolean isSetForm() {
    return this.form != null;
  }

  public void setFormIsSet(boolean value) {
    if (!value) {
      this.form = null;
    }
  }

  public String getInstructions() {
    return this.instructions;
  }

  public ThriftMedicationData setInstructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

  public void unsetInstructions() {
    this.instructions = null;
  }

  /** Returns true if field instructions is set (has been assigned a value) and false otherwise */
  public boolean isSetInstructions() {
    return this.instructions != null;
  }

  public void setInstructionsIsSet(boolean value) {
    if (!value) {
      this.instructions = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public ThriftMedicationData setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public ThriftMedicationData setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ThriftMedicationData setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getInsertedAt() {
    return this.insertedAt;
  }

  public ThriftMedicationData setInsertedAt(String insertedAt) {
    this.insertedAt = insertedAt;
    return this;
  }

  public void unsetInsertedAt() {
    this.insertedAt = null;
  }

  /** Returns true if field insertedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertedAt() {
    return this.insertedAt != null;
  }

  public void setInsertedAtIsSet(boolean value) {
    if (!value) {
      this.insertedAt = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public ThriftMedicationData setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getPrescription() {
    return this.prescription;
  }

  public ThriftMedicationData setPrescription(String prescription) {
    this.prescription = prescription;
    return this;
  }

  public void unsetPrescription() {
    this.prescription = null;
  }

  /** Returns true if field prescription is set (has been assigned a value) and false otherwise */
  public boolean isSetPrescription() {
    return this.prescription != null;
  }

  public void setPrescriptionIsSet(boolean value) {
    if (!value) {
      this.prescription = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATIENT_ID:
      if (value == null) {
        unsetPatientID();
      } else {
        setPatientID((String)value);
      }
      break;

    case CASE_ID:
      if (value == null) {
        unsetCaseID();
      } else {
        setCaseID((String)value);
      }
      break;

    case MEDICATION:
      if (value == null) {
        unsetMedication();
      } else {
        setMedication((String)value);
      }
      break;

    case DOSE:
      if (value == null) {
        unsetDose();
      } else {
        setDose((String)value);
      }
      break;

    case FORM:
      if (value == null) {
        unsetForm();
      } else {
        setForm((String)value);
      }
      break;

    case INSTRUCTIONS:
      if (value == null) {
        unsetInstructions();
      } else {
        setInstructions((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case INSERTED_AT:
      if (value == null) {
        unsetInsertedAt();
      } else {
        setInsertedAt((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case PRESCRIPTION:
      if (value == null) {
        unsetPrescription();
      } else {
        setPrescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATIENT_ID:
      return getPatientID();

    case CASE_ID:
      return getCaseID();

    case MEDICATION:
      return getMedication();

    case DOSE:
      return getDose();

    case FORM:
      return getForm();

    case INSTRUCTIONS:
      return getInstructions();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case STATUS:
      return getStatus();

    case INSERTED_AT:
      return getInsertedAt();

    case AUTHOR:
      return getAuthor();

    case PRESCRIPTION:
      return getPrescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATIENT_ID:
      return isSetPatientID();
    case CASE_ID:
      return isSetCaseID();
    case MEDICATION:
      return isSetMedication();
    case DOSE:
      return isSetDose();
    case FORM:
      return isSetForm();
    case INSTRUCTIONS:
      return isSetInstructions();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case STATUS:
      return isSetStatus();
    case INSERTED_AT:
      return isSetInsertedAt();
    case AUTHOR:
      return isSetAuthor();
    case PRESCRIPTION:
      return isSetPrescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftMedicationData)
      return this.equals((ThriftMedicationData)that);
    return false;
  }

  public boolean equals(ThriftMedicationData that) {
    if (that == null)
      return false;

    boolean this_present_patientID = true && this.isSetPatientID();
    boolean that_present_patientID = true && that.isSetPatientID();
    if (this_present_patientID || that_present_patientID) {
      if (!(this_present_patientID && that_present_patientID))
        return false;
      if (!this.patientID.equals(that.patientID))
        return false;
    }

    boolean this_present_caseID = true && this.isSetCaseID();
    boolean that_present_caseID = true && that.isSetCaseID();
    if (this_present_caseID || that_present_caseID) {
      if (!(this_present_caseID && that_present_caseID))
        return false;
      if (!this.caseID.equals(that.caseID))
        return false;
    }

    boolean this_present_medication = true && this.isSetMedication();
    boolean that_present_medication = true && that.isSetMedication();
    if (this_present_medication || that_present_medication) {
      if (!(this_present_medication && that_present_medication))
        return false;
      if (!this.medication.equals(that.medication))
        return false;
    }

    boolean this_present_dose = true && this.isSetDose();
    boolean that_present_dose = true && that.isSetDose();
    if (this_present_dose || that_present_dose) {
      if (!(this_present_dose && that_present_dose))
        return false;
      if (!this.dose.equals(that.dose))
        return false;
    }

    boolean this_present_form = true && this.isSetForm();
    boolean that_present_form = true && that.isSetForm();
    if (this_present_form || that_present_form) {
      if (!(this_present_form && that_present_form))
        return false;
      if (!this.form.equals(that.form))
        return false;
    }

    boolean this_present_instructions = true && this.isSetInstructions();
    boolean that_present_instructions = true && that.isSetInstructions();
    if (this_present_instructions || that_present_instructions) {
      if (!(this_present_instructions && that_present_instructions))
        return false;
      if (!this.instructions.equals(that.instructions))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_insertedAt = true && this.isSetInsertedAt();
    boolean that_present_insertedAt = true && that.isSetInsertedAt();
    if (this_present_insertedAt || that_present_insertedAt) {
      if (!(this_present_insertedAt && that_present_insertedAt))
        return false;
      if (!this.insertedAt.equals(that.insertedAt))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_prescription = true && this.isSetPrescription();
    boolean that_present_prescription = true && that.isSetPrescription();
    if (this_present_prescription || that_present_prescription) {
      if (!(this_present_prescription && that_present_prescription))
        return false;
      if (!this.prescription.equals(that.prescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_patientID = true && (isSetPatientID());
    list.add(present_patientID);
    if (present_patientID)
      list.add(patientID);

    boolean present_caseID = true && (isSetCaseID());
    list.add(present_caseID);
    if (present_caseID)
      list.add(caseID);

    boolean present_medication = true && (isSetMedication());
    list.add(present_medication);
    if (present_medication)
      list.add(medication);

    boolean present_dose = true && (isSetDose());
    list.add(present_dose);
    if (present_dose)
      list.add(dose);

    boolean present_form = true && (isSetForm());
    list.add(present_form);
    if (present_form)
      list.add(form);

    boolean present_instructions = true && (isSetInstructions());
    list.add(present_instructions);
    if (present_instructions)
      list.add(instructions);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_insertedAt = true && (isSetInsertedAt());
    list.add(present_insertedAt);
    if (present_insertedAt)
      list.add(insertedAt);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_prescription = true && (isSetPrescription());
    list.add(present_prescription);
    if (present_prescription)
      list.add(prescription);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftMedicationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPatientID()).compareTo(other.isSetPatientID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatientID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientID, other.patientID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaseID()).compareTo(other.isSetCaseID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseID, other.caseID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMedication()).compareTo(other.isSetMedication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMedication()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.medication, other.medication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDose()).compareTo(other.isSetDose());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDose()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dose, other.dose);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForm()).compareTo(other.isSetForm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.form, other.form);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstructions()).compareTo(other.isSetInstructions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstructions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instructions, other.instructions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertedAt()).compareTo(other.isSetInsertedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertedAt, other.insertedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrescription()).compareTo(other.isSetPrescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prescription, other.prescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftMedicationData(");
    boolean first = true;

    sb.append("patientID:");
    if (this.patientID == null) {
      sb.append("null");
    } else {
      sb.append(this.patientID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("caseID:");
    if (this.caseID == null) {
      sb.append("null");
    } else {
      sb.append(this.caseID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("medication:");
    if (this.medication == null) {
      sb.append("null");
    } else {
      sb.append(this.medication);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dose:");
    if (this.dose == null) {
      sb.append("null");
    } else {
      sb.append(this.dose);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("form:");
    if (this.form == null) {
      sb.append("null");
    } else {
      sb.append(this.form);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("instructions:");
    if (this.instructions == null) {
      sb.append("null");
    } else {
      sb.append(this.instructions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("insertedAt:");
    if (this.insertedAt == null) {
      sb.append("null");
    } else {
      sb.append(this.insertedAt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("prescription:");
    if (this.prescription == null) {
      sb.append("null");
    } else {
      sb.append(this.prescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftMedicationDataStandardSchemeFactory implements SchemeFactory {
    public ThriftMedicationDataStandardScheme getScheme() {
      return new ThriftMedicationDataStandardScheme();
    }
  }

  private static class ThriftMedicationDataStandardScheme extends StandardScheme<ThriftMedicationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftMedicationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.patientID = iprot.readString();
              struct.setPatientIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caseID = iprot.readString();
              struct.setCaseIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MEDICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.medication = iprot.readString();
              struct.setMedicationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOSE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dose = iprot.readString();
              struct.setDoseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.form = iprot.readString();
              struct.setFormIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INSTRUCTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instructions = iprot.readString();
              struct.setInstructionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // INSERTED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.insertedAt = iprot.readString();
              struct.setInsertedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PRESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.prescription = iprot.readString();
              struct.setPrescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftMedicationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.patientID != null) {
        oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
        oprot.writeString(struct.patientID);
        oprot.writeFieldEnd();
      }
      if (struct.caseID != null) {
        oprot.writeFieldBegin(CASE_ID_FIELD_DESC);
        oprot.writeString(struct.caseID);
        oprot.writeFieldEnd();
      }
      if (struct.medication != null) {
        oprot.writeFieldBegin(MEDICATION_FIELD_DESC);
        oprot.writeString(struct.medication);
        oprot.writeFieldEnd();
      }
      if (struct.dose != null) {
        oprot.writeFieldBegin(DOSE_FIELD_DESC);
        oprot.writeString(struct.dose);
        oprot.writeFieldEnd();
      }
      if (struct.form != null) {
        oprot.writeFieldBegin(FORM_FIELD_DESC);
        oprot.writeString(struct.form);
        oprot.writeFieldEnd();
      }
      if (struct.instructions != null) {
        oprot.writeFieldBegin(INSTRUCTIONS_FIELD_DESC);
        oprot.writeString(struct.instructions);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.insertedAt != null) {
        oprot.writeFieldBegin(INSERTED_AT_FIELD_DESC);
        oprot.writeString(struct.insertedAt);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.prescription != null) {
        oprot.writeFieldBegin(PRESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.prescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftMedicationDataTupleSchemeFactory implements SchemeFactory {
    public ThriftMedicationDataTupleScheme getScheme() {
      return new ThriftMedicationDataTupleScheme();
    }
  }

  private static class ThriftMedicationDataTupleScheme extends TupleScheme<ThriftMedicationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftMedicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPatientID()) {
        optionals.set(0);
      }
      if (struct.isSetCaseID()) {
        optionals.set(1);
      }
      if (struct.isSetMedication()) {
        optionals.set(2);
      }
      if (struct.isSetDose()) {
        optionals.set(3);
      }
      if (struct.isSetForm()) {
        optionals.set(4);
      }
      if (struct.isSetInstructions()) {
        optionals.set(5);
      }
      if (struct.isSetStartDate()) {
        optionals.set(6);
      }
      if (struct.isSetEndDate()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetInsertedAt()) {
        optionals.set(9);
      }
      if (struct.isSetAuthor()) {
        optionals.set(10);
      }
      if (struct.isSetPrescription()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetPatientID()) {
        oprot.writeString(struct.patientID);
      }
      if (struct.isSetCaseID()) {
        oprot.writeString(struct.caseID);
      }
      if (struct.isSetMedication()) {
        oprot.writeString(struct.medication);
      }
      if (struct.isSetDose()) {
        oprot.writeString(struct.dose);
      }
      if (struct.isSetForm()) {
        oprot.writeString(struct.form);
      }
      if (struct.isSetInstructions()) {
        oprot.writeString(struct.instructions);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetInsertedAt()) {
        oprot.writeString(struct.insertedAt);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetPrescription()) {
        oprot.writeString(struct.prescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftMedicationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.patientID = iprot.readString();
        struct.setPatientIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.caseID = iprot.readString();
        struct.setCaseIDIsSet(true);
      }
      if (incoming.get(2)) {
        struct.medication = iprot.readString();
        struct.setMedicationIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dose = iprot.readString();
        struct.setDoseIsSet(true);
      }
      if (incoming.get(4)) {
        struct.form = iprot.readString();
        struct.setFormIsSet(true);
      }
      if (incoming.get(5)) {
        struct.instructions = iprot.readString();
        struct.setInstructionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.insertedAt = iprot.readString();
        struct.setInsertedAtIsSet(true);
      }
      if (incoming.get(10)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.prescription = iprot.readString();
        struct.setPrescriptionIsSet(true);
      }
    }
  }

}

