/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-15")
public class ThriftDoctorService {

  public interface Iface {

    public ThriftPatientProfileData getPatientProfile(String patientId) throws ThriftException, org.apache.thrift.TException;

    public List<ThriftPatientData> findPatients(ThriftPatientData findPatientData) throws ThriftException, org.apache.thrift.TException;

    public List<ThriftCaseData> getLastDoctorCases(String doctorPatientId, int listSizeMax) throws ThriftException, org.apache.thrift.TException;

    public ThriftCaseDetailData getCaseDetail(String caseId, String patientId) throws ThriftException, org.apache.thrift.TException;

    public boolean updateCaseDetail(ThriftCaseDetailData caseDetailData) throws ThriftException, org.apache.thrift.TException;

    public ThriftCaseDetailData insertCaseDetail(ThriftCaseDetailData caseDetailData) throws ThriftException, org.apache.thrift.TException;

    public List<ThriftSectionMedicationData> getLastDoctorMedications(String doctorPatientId, int listSizeMax) throws ThriftException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getPatientProfile(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPatients(ThriftPatientData findPatientData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastDoctorCases(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getCaseDetail(String caseId, String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateCaseDetail(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertCaseDetail(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLastDoctorMedications(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ThriftPatientProfileData getPatientProfile(String patientId) throws ThriftException, org.apache.thrift.TException
    {
      send_getPatientProfile(patientId);
      return recv_getPatientProfile();
    }

    public void send_getPatientProfile(String patientId) throws org.apache.thrift.TException
    {
      getPatientProfile_args args = new getPatientProfile_args();
      args.setPatientId(patientId);
      sendBase("getPatientProfile", args);
    }

    public ThriftPatientProfileData recv_getPatientProfile() throws ThriftException, org.apache.thrift.TException
    {
      getPatientProfile_result result = new getPatientProfile_result();
      receiveBase(result, "getPatientProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPatientProfile failed: unknown result");
    }

    public List<ThriftPatientData> findPatients(ThriftPatientData findPatientData) throws ThriftException, org.apache.thrift.TException
    {
      send_findPatients(findPatientData);
      return recv_findPatients();
    }

    public void send_findPatients(ThriftPatientData findPatientData) throws org.apache.thrift.TException
    {
      findPatients_args args = new findPatients_args();
      args.setFindPatientData(findPatientData);
      sendBase("findPatients", args);
    }

    public List<ThriftPatientData> recv_findPatients() throws ThriftException, org.apache.thrift.TException
    {
      findPatients_result result = new findPatients_result();
      receiveBase(result, "findPatients");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPatients failed: unknown result");
    }

    public List<ThriftCaseData> getLastDoctorCases(String doctorPatientId, int listSizeMax) throws ThriftException, org.apache.thrift.TException
    {
      send_getLastDoctorCases(doctorPatientId, listSizeMax);
      return recv_getLastDoctorCases();
    }

    public void send_getLastDoctorCases(String doctorPatientId, int listSizeMax) throws org.apache.thrift.TException
    {
      getLastDoctorCases_args args = new getLastDoctorCases_args();
      args.setDoctorPatientId(doctorPatientId);
      args.setListSizeMax(listSizeMax);
      sendBase("getLastDoctorCases", args);
    }

    public List<ThriftCaseData> recv_getLastDoctorCases() throws ThriftException, org.apache.thrift.TException
    {
      getLastDoctorCases_result result = new getLastDoctorCases_result();
      receiveBase(result, "getLastDoctorCases");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastDoctorCases failed: unknown result");
    }

    public ThriftCaseDetailData getCaseDetail(String caseId, String patientId) throws ThriftException, org.apache.thrift.TException
    {
      send_getCaseDetail(caseId, patientId);
      return recv_getCaseDetail();
    }

    public void send_getCaseDetail(String caseId, String patientId) throws org.apache.thrift.TException
    {
      getCaseDetail_args args = new getCaseDetail_args();
      args.setCaseId(caseId);
      args.setPatientId(patientId);
      sendBase("getCaseDetail", args);
    }

    public ThriftCaseDetailData recv_getCaseDetail() throws ThriftException, org.apache.thrift.TException
    {
      getCaseDetail_result result = new getCaseDetail_result();
      receiveBase(result, "getCaseDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCaseDetail failed: unknown result");
    }

    public boolean updateCaseDetail(ThriftCaseDetailData caseDetailData) throws ThriftException, org.apache.thrift.TException
    {
      send_updateCaseDetail(caseDetailData);
      return recv_updateCaseDetail();
    }

    public void send_updateCaseDetail(ThriftCaseDetailData caseDetailData) throws org.apache.thrift.TException
    {
      updateCaseDetail_args args = new updateCaseDetail_args();
      args.setCaseDetailData(caseDetailData);
      sendBase("updateCaseDetail", args);
    }

    public boolean recv_updateCaseDetail() throws ThriftException, org.apache.thrift.TException
    {
      updateCaseDetail_result result = new updateCaseDetail_result();
      receiveBase(result, "updateCaseDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateCaseDetail failed: unknown result");
    }

    public ThriftCaseDetailData insertCaseDetail(ThriftCaseDetailData caseDetailData) throws ThriftException, org.apache.thrift.TException
    {
      send_insertCaseDetail(caseDetailData);
      return recv_insertCaseDetail();
    }

    public void send_insertCaseDetail(ThriftCaseDetailData caseDetailData) throws org.apache.thrift.TException
    {
      insertCaseDetail_args args = new insertCaseDetail_args();
      args.setCaseDetailData(caseDetailData);
      sendBase("insertCaseDetail", args);
    }

    public ThriftCaseDetailData recv_insertCaseDetail() throws ThriftException, org.apache.thrift.TException
    {
      insertCaseDetail_result result = new insertCaseDetail_result();
      receiveBase(result, "insertCaseDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertCaseDetail failed: unknown result");
    }

    public List<ThriftSectionMedicationData> getLastDoctorMedications(String doctorPatientId, int listSizeMax) throws ThriftException, org.apache.thrift.TException
    {
      send_getLastDoctorMedications(doctorPatientId, listSizeMax);
      return recv_getLastDoctorMedications();
    }

    public void send_getLastDoctorMedications(String doctorPatientId, int listSizeMax) throws org.apache.thrift.TException
    {
      getLastDoctorMedications_args args = new getLastDoctorMedications_args();
      args.setDoctorPatientId(doctorPatientId);
      args.setListSizeMax(listSizeMax);
      sendBase("getLastDoctorMedications", args);
    }

    public List<ThriftSectionMedicationData> recv_getLastDoctorMedications() throws ThriftException, org.apache.thrift.TException
    {
      getLastDoctorMedications_result result = new getLastDoctorMedications_result();
      receiveBase(result, "getLastDoctorMedications");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ex != null) {
        throw result.ex;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLastDoctorMedications failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getPatientProfile(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPatientProfile_call method_call = new getPatientProfile_call(patientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPatientProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String patientId;
      public getPatientProfile_call(String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.patientId = patientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPatientProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPatientProfile_args args = new getPatientProfile_args();
        args.setPatientId(patientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftPatientProfileData getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPatientProfile();
      }
    }

    public void findPatients(ThriftPatientData findPatientData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPatients_call method_call = new findPatients_call(findPatientData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPatients_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftPatientData findPatientData;
      public findPatients_call(ThriftPatientData findPatientData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.findPatientData = findPatientData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPatients", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPatients_args args = new findPatients_args();
        args.setFindPatientData(findPatientData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftPatientData> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPatients();
      }
    }

    public void getLastDoctorCases(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastDoctorCases_call method_call = new getLastDoctorCases_call(doctorPatientId, listSizeMax, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastDoctorCases_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String doctorPatientId;
      private int listSizeMax;
      public getLastDoctorCases_call(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doctorPatientId = doctorPatientId;
        this.listSizeMax = listSizeMax;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastDoctorCases", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastDoctorCases_args args = new getLastDoctorCases_args();
        args.setDoctorPatientId(doctorPatientId);
        args.setListSizeMax(listSizeMax);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftCaseData> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastDoctorCases();
      }
    }

    public void getCaseDetail(String caseId, String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCaseDetail_call method_call = new getCaseDetail_call(caseId, patientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCaseDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String caseId;
      private String patientId;
      public getCaseDetail_call(String caseId, String patientId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caseId = caseId;
        this.patientId = patientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCaseDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCaseDetail_args args = new getCaseDetail_args();
        args.setCaseId(caseId);
        args.setPatientId(patientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftCaseDetailData getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCaseDetail();
      }
    }

    public void updateCaseDetail(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateCaseDetail_call method_call = new updateCaseDetail_call(caseDetailData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateCaseDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftCaseDetailData caseDetailData;
      public updateCaseDetail_call(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caseDetailData = caseDetailData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateCaseDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateCaseDetail_args args = new updateCaseDetail_args();
        args.setCaseDetailData(caseDetailData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateCaseDetail();
      }
    }

    public void insertCaseDetail(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertCaseDetail_call method_call = new insertCaseDetail_call(caseDetailData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertCaseDetail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ThriftCaseDetailData caseDetailData;
      public insertCaseDetail_call(ThriftCaseDetailData caseDetailData, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caseDetailData = caseDetailData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertCaseDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertCaseDetail_args args = new insertCaseDetail_args();
        args.setCaseDetailData(caseDetailData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ThriftCaseDetailData getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertCaseDetail();
      }
    }

    public void getLastDoctorMedications(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLastDoctorMedications_call method_call = new getLastDoctorMedications_call(doctorPatientId, listSizeMax, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLastDoctorMedications_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String doctorPatientId;
      private int listSizeMax;
      public getLastDoctorMedications_call(String doctorPatientId, int listSizeMax, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.doctorPatientId = doctorPatientId;
        this.listSizeMax = listSizeMax;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLastDoctorMedications", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLastDoctorMedications_args args = new getLastDoctorMedications_args();
        args.setDoctorPatientId(doctorPatientId);
        args.setListSizeMax(listSizeMax);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ThriftSectionMedicationData> getResult() throws ThriftException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLastDoctorMedications();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getPatientProfile", new getPatientProfile());
      processMap.put("findPatients", new findPatients());
      processMap.put("getLastDoctorCases", new getLastDoctorCases());
      processMap.put("getCaseDetail", new getCaseDetail());
      processMap.put("updateCaseDetail", new updateCaseDetail());
      processMap.put("insertCaseDetail", new insertCaseDetail());
      processMap.put("getLastDoctorMedications", new getLastDoctorMedications());
      return processMap;
    }

    public static class getPatientProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPatientProfile_args> {
      public getPatientProfile() {
        super("getPatientProfile");
      }

      public getPatientProfile_args getEmptyArgsInstance() {
        return new getPatientProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPatientProfile_result getResult(I iface, getPatientProfile_args args) throws org.apache.thrift.TException {
        getPatientProfile_result result = new getPatientProfile_result();
        try {
          result.success = iface.getPatientProfile(args.patientId);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class findPatients<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPatients_args> {
      public findPatients() {
        super("findPatients");
      }

      public findPatients_args getEmptyArgsInstance() {
        return new findPatients_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPatients_result getResult(I iface, findPatients_args args) throws org.apache.thrift.TException {
        findPatients_result result = new findPatients_result();
        try {
          result.success = iface.findPatients(args.findPatientData);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getLastDoctorCases<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastDoctorCases_args> {
      public getLastDoctorCases() {
        super("getLastDoctorCases");
      }

      public getLastDoctorCases_args getEmptyArgsInstance() {
        return new getLastDoctorCases_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastDoctorCases_result getResult(I iface, getLastDoctorCases_args args) throws org.apache.thrift.TException {
        getLastDoctorCases_result result = new getLastDoctorCases_result();
        try {
          result.success = iface.getLastDoctorCases(args.doctorPatientId, args.listSizeMax);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getCaseDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCaseDetail_args> {
      public getCaseDetail() {
        super("getCaseDetail");
      }

      public getCaseDetail_args getEmptyArgsInstance() {
        return new getCaseDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCaseDetail_result getResult(I iface, getCaseDetail_args args) throws org.apache.thrift.TException {
        getCaseDetail_result result = new getCaseDetail_result();
        try {
          result.success = iface.getCaseDetail(args.caseId, args.patientId);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class updateCaseDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateCaseDetail_args> {
      public updateCaseDetail() {
        super("updateCaseDetail");
      }

      public updateCaseDetail_args getEmptyArgsInstance() {
        return new updateCaseDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateCaseDetail_result getResult(I iface, updateCaseDetail_args args) throws org.apache.thrift.TException {
        updateCaseDetail_result result = new updateCaseDetail_result();
        try {
          result.success = iface.updateCaseDetail(args.caseDetailData);
          result.setSuccessIsSet(true);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class insertCaseDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertCaseDetail_args> {
      public insertCaseDetail() {
        super("insertCaseDetail");
      }

      public insertCaseDetail_args getEmptyArgsInstance() {
        return new insertCaseDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertCaseDetail_result getResult(I iface, insertCaseDetail_args args) throws org.apache.thrift.TException {
        insertCaseDetail_result result = new insertCaseDetail_result();
        try {
          result.success = iface.insertCaseDetail(args.caseDetailData);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

    public static class getLastDoctorMedications<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLastDoctorMedications_args> {
      public getLastDoctorMedications() {
        super("getLastDoctorMedications");
      }

      public getLastDoctorMedications_args getEmptyArgsInstance() {
        return new getLastDoctorMedications_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLastDoctorMedications_result getResult(I iface, getLastDoctorMedications_args args) throws org.apache.thrift.TException {
        getLastDoctorMedications_result result = new getLastDoctorMedications_result();
        try {
          result.success = iface.getLastDoctorMedications(args.doctorPatientId, args.listSizeMax);
        } catch (ThriftException ex) {
          result.ex = ex;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getPatientProfile", new getPatientProfile());
      processMap.put("findPatients", new findPatients());
      processMap.put("getLastDoctorCases", new getLastDoctorCases());
      processMap.put("getCaseDetail", new getCaseDetail());
      processMap.put("updateCaseDetail", new updateCaseDetail());
      processMap.put("insertCaseDetail", new insertCaseDetail());
      processMap.put("getLastDoctorMedications", new getLastDoctorMedications());
      return processMap;
    }

    public static class getPatientProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPatientProfile_args, ThriftPatientProfileData> {
      public getPatientProfile() {
        super("getPatientProfile");
      }

      public getPatientProfile_args getEmptyArgsInstance() {
        return new getPatientProfile_args();
      }

      public AsyncMethodCallback<ThriftPatientProfileData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftPatientProfileData>() { 
          public void onComplete(ThriftPatientProfileData o) {
            getPatientProfile_result result = new getPatientProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPatientProfile_result result = new getPatientProfile_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPatientProfile_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftPatientProfileData> resultHandler) throws TException {
        iface.getPatientProfile(args.patientId,resultHandler);
      }
    }

    public static class findPatients<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPatients_args, List<ThriftPatientData>> {
      public findPatients() {
        super("findPatients");
      }

      public findPatients_args getEmptyArgsInstance() {
        return new findPatients_args();
      }

      public AsyncMethodCallback<List<ThriftPatientData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftPatientData>>() { 
          public void onComplete(List<ThriftPatientData> o) {
            findPatients_result result = new findPatients_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPatients_result result = new findPatients_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPatients_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftPatientData>> resultHandler) throws TException {
        iface.findPatients(args.findPatientData,resultHandler);
      }
    }

    public static class getLastDoctorCases<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastDoctorCases_args, List<ThriftCaseData>> {
      public getLastDoctorCases() {
        super("getLastDoctorCases");
      }

      public getLastDoctorCases_args getEmptyArgsInstance() {
        return new getLastDoctorCases_args();
      }

      public AsyncMethodCallback<List<ThriftCaseData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftCaseData>>() { 
          public void onComplete(List<ThriftCaseData> o) {
            getLastDoctorCases_result result = new getLastDoctorCases_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastDoctorCases_result result = new getLastDoctorCases_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastDoctorCases_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftCaseData>> resultHandler) throws TException {
        iface.getLastDoctorCases(args.doctorPatientId, args.listSizeMax,resultHandler);
      }
    }

    public static class getCaseDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCaseDetail_args, ThriftCaseDetailData> {
      public getCaseDetail() {
        super("getCaseDetail");
      }

      public getCaseDetail_args getEmptyArgsInstance() {
        return new getCaseDetail_args();
      }

      public AsyncMethodCallback<ThriftCaseDetailData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftCaseDetailData>() { 
          public void onComplete(ThriftCaseDetailData o) {
            getCaseDetail_result result = new getCaseDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getCaseDetail_result result = new getCaseDetail_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCaseDetail_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCaseDetailData> resultHandler) throws TException {
        iface.getCaseDetail(args.caseId, args.patientId,resultHandler);
      }
    }

    public static class updateCaseDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateCaseDetail_args, Boolean> {
      public updateCaseDetail() {
        super("updateCaseDetail");
      }

      public updateCaseDetail_args getEmptyArgsInstance() {
        return new updateCaseDetail_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateCaseDetail_result result = new updateCaseDetail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateCaseDetail_result result = new updateCaseDetail_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateCaseDetail_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateCaseDetail(args.caseDetailData,resultHandler);
      }
    }

    public static class insertCaseDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertCaseDetail_args, ThriftCaseDetailData> {
      public insertCaseDetail() {
        super("insertCaseDetail");
      }

      public insertCaseDetail_args getEmptyArgsInstance() {
        return new insertCaseDetail_args();
      }

      public AsyncMethodCallback<ThriftCaseDetailData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ThriftCaseDetailData>() { 
          public void onComplete(ThriftCaseDetailData o) {
            insertCaseDetail_result result = new insertCaseDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertCaseDetail_result result = new insertCaseDetail_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertCaseDetail_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCaseDetailData> resultHandler) throws TException {
        iface.insertCaseDetail(args.caseDetailData,resultHandler);
      }
    }

    public static class getLastDoctorMedications<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLastDoctorMedications_args, List<ThriftSectionMedicationData>> {
      public getLastDoctorMedications() {
        super("getLastDoctorMedications");
      }

      public getLastDoctorMedications_args getEmptyArgsInstance() {
        return new getLastDoctorMedications_args();
      }

      public AsyncMethodCallback<List<ThriftSectionMedicationData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ThriftSectionMedicationData>>() { 
          public void onComplete(List<ThriftSectionMedicationData> o) {
            getLastDoctorMedications_result result = new getLastDoctorMedications_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLastDoctorMedications_result result = new getLastDoctorMedications_result();
            if (e instanceof ThriftException) {
                        result.ex = (ThriftException) e;
                        result.setExIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLastDoctorMedications_args args, org.apache.thrift.async.AsyncMethodCallback<List<ThriftSectionMedicationData>> resultHandler) throws TException {
        iface.getLastDoctorMedications(args.doctorPatientId, args.listSizeMax,resultHandler);
      }
    }

  }

  public static class getPatientProfile_args implements org.apache.thrift.TBase<getPatientProfile_args, getPatientProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientProfile_args");

    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientProfile_argsTupleSchemeFactory());
    }

    public String patientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PATIENT_ID((short)1, "patientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientProfile_args.class, metaDataMap);
    }

    public getPatientProfile_args() {
    }

    public getPatientProfile_args(
      String patientId)
    {
      this();
      this.patientId = patientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientProfile_args(getPatientProfile_args other) {
      if (other.isSetPatientId()) {
        this.patientId = other.patientId;
      }
    }

    public getPatientProfile_args deepCopy() {
      return new getPatientProfile_args(this);
    }

    @Override
    public void clear() {
      this.patientId = null;
    }

    public String getPatientId() {
      return this.patientId;
    }

    public getPatientProfile_args setPatientId(String patientId) {
      this.patientId = patientId;
      return this;
    }

    public void unsetPatientId() {
      this.patientId = null;
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return this.patientId != null;
    }

    public void setPatientIdIsSet(boolean value) {
      if (!value) {
        this.patientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PATIENT_ID:
        return getPatientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PATIENT_ID:
        return isSetPatientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientProfile_args)
        return this.equals((getPatientProfile_args)that);
      return false;
    }

    public boolean equals(getPatientProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_patientId = true && this.isSetPatientId();
      boolean that_present_patientId = true && that.isSetPatientId();
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (!this.patientId.equals(that.patientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_patientId = true && (isSetPatientId());
      list.add(present_patientId);
      if (present_patientId)
        list.add(patientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(other.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, other.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientProfile_args(");
      boolean first = true;

      sb.append("patientId:");
      if (this.patientId == null) {
        sb.append("null");
      } else {
        sb.append(this.patientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getPatientProfile_argsStandardScheme getScheme() {
        return new getPatientProfile_argsStandardScheme();
      }
    }

    private static class getPatientProfile_argsStandardScheme extends StandardScheme<getPatientProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patientId = iprot.readString();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.patientId != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getPatientProfile_argsTupleScheme getScheme() {
        return new getPatientProfile_argsTupleScheme();
      }
    }

    private static class getPatientProfile_argsTupleScheme extends TupleScheme<getPatientProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPatientId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPatientId()) {
          oprot.writeString(struct.patientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.patientId = iprot.readString();
          struct.setPatientIdIsSet(true);
        }
      }
    }

  }

  public static class getPatientProfile_result implements org.apache.thrift.TBase<getPatientProfile_result, getPatientProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPatientProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPatientProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPatientProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPatientProfile_resultTupleSchemeFactory());
    }

    public ThriftPatientProfileData success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftPatientProfileData.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPatientProfile_result.class, metaDataMap);
    }

    public getPatientProfile_result() {
    }

    public getPatientProfile_result(
      ThriftPatientProfileData success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPatientProfile_result(getPatientProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftPatientProfileData(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getPatientProfile_result deepCopy() {
      return new getPatientProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public ThriftPatientProfileData getSuccess() {
      return this.success;
    }

    public getPatientProfile_result setSuccess(ThriftPatientProfileData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getPatientProfile_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftPatientProfileData)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPatientProfile_result)
        return this.equals((getPatientProfile_result)that);
      return false;
    }

    public boolean equals(getPatientProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getPatientProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPatientProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPatientProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getPatientProfile_resultStandardScheme getScheme() {
        return new getPatientProfile_resultStandardScheme();
      }
    }

    private static class getPatientProfile_resultStandardScheme extends StandardScheme<getPatientProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPatientProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftPatientProfileData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPatientProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPatientProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getPatientProfile_resultTupleScheme getScheme() {
        return new getPatientProfile_resultTupleScheme();
      }
    }

    private static class getPatientProfile_resultTupleScheme extends TupleScheme<getPatientProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPatientProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPatientProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftPatientProfileData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class findPatients_args implements org.apache.thrift.TBase<findPatients_args, findPatients_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPatients_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatients_args");

    private static final org.apache.thrift.protocol.TField FIND_PATIENT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("findPatientData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatients_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatients_argsTupleSchemeFactory());
    }

    public ThriftPatientData findPatientData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIND_PATIENT_DATA((short)1, "findPatientData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIND_PATIENT_DATA
            return FIND_PATIENT_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIND_PATIENT_DATA, new org.apache.thrift.meta_data.FieldMetaData("findPatientData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftPatientData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatients_args.class, metaDataMap);
    }

    public findPatients_args() {
    }

    public findPatients_args(
      ThriftPatientData findPatientData)
    {
      this();
      this.findPatientData = findPatientData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatients_args(findPatients_args other) {
      if (other.isSetFindPatientData()) {
        this.findPatientData = new ThriftPatientData(other.findPatientData);
      }
    }

    public findPatients_args deepCopy() {
      return new findPatients_args(this);
    }

    @Override
    public void clear() {
      this.findPatientData = null;
    }

    public ThriftPatientData getFindPatientData() {
      return this.findPatientData;
    }

    public findPatients_args setFindPatientData(ThriftPatientData findPatientData) {
      this.findPatientData = findPatientData;
      return this;
    }

    public void unsetFindPatientData() {
      this.findPatientData = null;
    }

    /** Returns true if field findPatientData is set (has been assigned a value) and false otherwise */
    public boolean isSetFindPatientData() {
      return this.findPatientData != null;
    }

    public void setFindPatientDataIsSet(boolean value) {
      if (!value) {
        this.findPatientData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FIND_PATIENT_DATA:
        if (value == null) {
          unsetFindPatientData();
        } else {
          setFindPatientData((ThriftPatientData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FIND_PATIENT_DATA:
        return getFindPatientData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FIND_PATIENT_DATA:
        return isSetFindPatientData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatients_args)
        return this.equals((findPatients_args)that);
      return false;
    }

    public boolean equals(findPatients_args that) {
      if (that == null)
        return false;

      boolean this_present_findPatientData = true && this.isSetFindPatientData();
      boolean that_present_findPatientData = true && that.isSetFindPatientData();
      if (this_present_findPatientData || that_present_findPatientData) {
        if (!(this_present_findPatientData && that_present_findPatientData))
          return false;
        if (!this.findPatientData.equals(that.findPatientData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_findPatientData = true && (isSetFindPatientData());
      list.add(present_findPatientData);
      if (present_findPatientData)
        list.add(findPatientData);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPatients_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFindPatientData()).compareTo(other.isSetFindPatientData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFindPatientData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.findPatientData, other.findPatientData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatients_args(");
      boolean first = true;

      sb.append("findPatientData:");
      if (this.findPatientData == null) {
        sb.append("null");
      } else {
        sb.append(this.findPatientData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (findPatientData != null) {
        findPatientData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatients_argsStandardSchemeFactory implements SchemeFactory {
      public findPatients_argsStandardScheme getScheme() {
        return new findPatients_argsStandardScheme();
      }
    }

    private static class findPatients_argsStandardScheme extends StandardScheme<findPatients_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatients_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIND_PATIENT_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.findPatientData = new ThriftPatientData();
                struct.findPatientData.read(iprot);
                struct.setFindPatientDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatients_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.findPatientData != null) {
          oprot.writeFieldBegin(FIND_PATIENT_DATA_FIELD_DESC);
          struct.findPatientData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatients_argsTupleSchemeFactory implements SchemeFactory {
      public findPatients_argsTupleScheme getScheme() {
        return new findPatients_argsTupleScheme();
      }
    }

    private static class findPatients_argsTupleScheme extends TupleScheme<findPatients_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFindPatientData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFindPatientData()) {
          struct.findPatientData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatients_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.findPatientData = new ThriftPatientData();
          struct.findPatientData.read(iprot);
          struct.setFindPatientDataIsSet(true);
        }
      }
    }

  }

  public static class findPatients_result implements org.apache.thrift.TBase<findPatients_result, findPatients_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPatients_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPatients_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPatients_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPatients_resultTupleSchemeFactory());
    }

    public List<ThriftPatientData> success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftPatientData.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPatients_result.class, metaDataMap);
    }

    public findPatients_result() {
    }

    public findPatients_result(
      List<ThriftPatientData> success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPatients_result(findPatients_result other) {
      if (other.isSetSuccess()) {
        List<ThriftPatientData> __this__success = new ArrayList<ThriftPatientData>(other.success.size());
        for (ThriftPatientData other_element : other.success) {
          __this__success.add(new ThriftPatientData(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public findPatients_result deepCopy() {
      return new findPatients_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftPatientData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftPatientData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftPatientData>();
      }
      this.success.add(elem);
    }

    public List<ThriftPatientData> getSuccess() {
      return this.success;
    }

    public findPatients_result setSuccess(List<ThriftPatientData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public findPatients_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftPatientData>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPatients_result)
        return this.equals((findPatients_result)that);
      return false;
    }

    public boolean equals(findPatients_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPatients_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPatients_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPatients_resultStandardSchemeFactory implements SchemeFactory {
      public findPatients_resultStandardScheme getScheme() {
        return new findPatients_resultStandardScheme();
      }
    }

    private static class findPatients_resultStandardScheme extends StandardScheme<findPatients_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPatients_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftPatientData>(_list40.size);
                  ThriftPatientData _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new ThriftPatientData();
                    _elem41.read(iprot);
                    struct.success.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPatients_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftPatientData _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPatients_resultTupleSchemeFactory implements SchemeFactory {
      public findPatients_resultTupleScheme getScheme() {
        return new findPatients_resultTupleScheme();
      }
    }

    private static class findPatients_resultTupleScheme extends TupleScheme<findPatients_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPatients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftPatientData _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPatients_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftPatientData>(_list45.size);
            ThriftPatientData _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new ThriftPatientData();
              _elem46.read(iprot);
              struct.success.add(_elem46);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getLastDoctorCases_args implements org.apache.thrift.TBase<getLastDoctorCases_args, getLastDoctorCases_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastDoctorCases_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastDoctorCases_args");

    private static final org.apache.thrift.protocol.TField DOCTOR_PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorPatientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("listSizeMax", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastDoctorCases_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastDoctorCases_argsTupleSchemeFactory());
    }

    public String doctorPatientId; // required
    public int listSizeMax; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCTOR_PATIENT_ID((short)1, "doctorPatientId"),
      LIST_SIZE_MAX((short)2, "listSizeMax");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCTOR_PATIENT_ID
            return DOCTOR_PATIENT_ID;
          case 2: // LIST_SIZE_MAX
            return LIST_SIZE_MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LISTSIZEMAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCTOR_PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorPatientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIST_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("listSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastDoctorCases_args.class, metaDataMap);
    }

    public getLastDoctorCases_args() {
    }

    public getLastDoctorCases_args(
      String doctorPatientId,
      int listSizeMax)
    {
      this();
      this.doctorPatientId = doctorPatientId;
      this.listSizeMax = listSizeMax;
      setListSizeMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastDoctorCases_args(getLastDoctorCases_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDoctorPatientId()) {
        this.doctorPatientId = other.doctorPatientId;
      }
      this.listSizeMax = other.listSizeMax;
    }

    public getLastDoctorCases_args deepCopy() {
      return new getLastDoctorCases_args(this);
    }

    @Override
    public void clear() {
      this.doctorPatientId = null;
      setListSizeMaxIsSet(false);
      this.listSizeMax = 0;
    }

    public String getDoctorPatientId() {
      return this.doctorPatientId;
    }

    public getLastDoctorCases_args setDoctorPatientId(String doctorPatientId) {
      this.doctorPatientId = doctorPatientId;
      return this;
    }

    public void unsetDoctorPatientId() {
      this.doctorPatientId = null;
    }

    /** Returns true if field doctorPatientId is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctorPatientId() {
      return this.doctorPatientId != null;
    }

    public void setDoctorPatientIdIsSet(boolean value) {
      if (!value) {
        this.doctorPatientId = null;
      }
    }

    public int getListSizeMax() {
      return this.listSizeMax;
    }

    public getLastDoctorCases_args setListSizeMax(int listSizeMax) {
      this.listSizeMax = listSizeMax;
      setListSizeMaxIsSet(true);
      return this;
    }

    public void unsetListSizeMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID);
    }

    /** Returns true if field listSizeMax is set (has been assigned a value) and false otherwise */
    public boolean isSetListSizeMax() {
      return EncodingUtils.testBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID);
    }

    public void setListSizeMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCTOR_PATIENT_ID:
        if (value == null) {
          unsetDoctorPatientId();
        } else {
          setDoctorPatientId((String)value);
        }
        break;

      case LIST_SIZE_MAX:
        if (value == null) {
          unsetListSizeMax();
        } else {
          setListSizeMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCTOR_PATIENT_ID:
        return getDoctorPatientId();

      case LIST_SIZE_MAX:
        return getListSizeMax();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCTOR_PATIENT_ID:
        return isSetDoctorPatientId();
      case LIST_SIZE_MAX:
        return isSetListSizeMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastDoctorCases_args)
        return this.equals((getLastDoctorCases_args)that);
      return false;
    }

    public boolean equals(getLastDoctorCases_args that) {
      if (that == null)
        return false;

      boolean this_present_doctorPatientId = true && this.isSetDoctorPatientId();
      boolean that_present_doctorPatientId = true && that.isSetDoctorPatientId();
      if (this_present_doctorPatientId || that_present_doctorPatientId) {
        if (!(this_present_doctorPatientId && that_present_doctorPatientId))
          return false;
        if (!this.doctorPatientId.equals(that.doctorPatientId))
          return false;
      }

      boolean this_present_listSizeMax = true;
      boolean that_present_listSizeMax = true;
      if (this_present_listSizeMax || that_present_listSizeMax) {
        if (!(this_present_listSizeMax && that_present_listSizeMax))
          return false;
        if (this.listSizeMax != that.listSizeMax)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_doctorPatientId = true && (isSetDoctorPatientId());
      list.add(present_doctorPatientId);
      if (present_doctorPatientId)
        list.add(doctorPatientId);

      boolean present_listSizeMax = true;
      list.add(present_listSizeMax);
      if (present_listSizeMax)
        list.add(listSizeMax);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastDoctorCases_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoctorPatientId()).compareTo(other.isSetDoctorPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctorPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorPatientId, other.doctorPatientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListSizeMax()).compareTo(other.isSetListSizeMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListSizeMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listSizeMax, other.listSizeMax);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastDoctorCases_args(");
      boolean first = true;

      sb.append("doctorPatientId:");
      if (this.doctorPatientId == null) {
        sb.append("null");
      } else {
        sb.append(this.doctorPatientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listSizeMax:");
      sb.append(this.listSizeMax);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastDoctorCases_argsStandardSchemeFactory implements SchemeFactory {
      public getLastDoctorCases_argsStandardScheme getScheme() {
        return new getLastDoctorCases_argsStandardScheme();
      }
    }

    private static class getLastDoctorCases_argsStandardScheme extends StandardScheme<getLastDoctorCases_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastDoctorCases_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCTOR_PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.doctorPatientId = iprot.readString();
                struct.setDoctorPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_SIZE_MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.listSizeMax = iprot.readI32();
                struct.setListSizeMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastDoctorCases_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doctorPatientId != null) {
          oprot.writeFieldBegin(DOCTOR_PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.doctorPatientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIST_SIZE_MAX_FIELD_DESC);
        oprot.writeI32(struct.listSizeMax);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastDoctorCases_argsTupleSchemeFactory implements SchemeFactory {
      public getLastDoctorCases_argsTupleScheme getScheme() {
        return new getLastDoctorCases_argsTupleScheme();
      }
    }

    private static class getLastDoctorCases_argsTupleScheme extends TupleScheme<getLastDoctorCases_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastDoctorCases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoctorPatientId()) {
          optionals.set(0);
        }
        if (struct.isSetListSizeMax()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDoctorPatientId()) {
          oprot.writeString(struct.doctorPatientId);
        }
        if (struct.isSetListSizeMax()) {
          oprot.writeI32(struct.listSizeMax);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastDoctorCases_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.doctorPatientId = iprot.readString();
          struct.setDoctorPatientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.listSizeMax = iprot.readI32();
          struct.setListSizeMaxIsSet(true);
        }
      }
    }

  }

  public static class getLastDoctorCases_result implements org.apache.thrift.TBase<getLastDoctorCases_result, getLastDoctorCases_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastDoctorCases_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastDoctorCases_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastDoctorCases_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastDoctorCases_resultTupleSchemeFactory());
    }

    public List<ThriftCaseData> success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseData.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastDoctorCases_result.class, metaDataMap);
    }

    public getLastDoctorCases_result() {
    }

    public getLastDoctorCases_result(
      List<ThriftCaseData> success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastDoctorCases_result(getLastDoctorCases_result other) {
      if (other.isSetSuccess()) {
        List<ThriftCaseData> __this__success = new ArrayList<ThriftCaseData>(other.success.size());
        for (ThriftCaseData other_element : other.success) {
          __this__success.add(new ThriftCaseData(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getLastDoctorCases_result deepCopy() {
      return new getLastDoctorCases_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftCaseData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftCaseData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftCaseData>();
      }
      this.success.add(elem);
    }

    public List<ThriftCaseData> getSuccess() {
      return this.success;
    }

    public getLastDoctorCases_result setSuccess(List<ThriftCaseData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getLastDoctorCases_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftCaseData>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastDoctorCases_result)
        return this.equals((getLastDoctorCases_result)that);
      return false;
    }

    public boolean equals(getLastDoctorCases_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastDoctorCases_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastDoctorCases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastDoctorCases_resultStandardSchemeFactory implements SchemeFactory {
      public getLastDoctorCases_resultStandardScheme getScheme() {
        return new getLastDoctorCases_resultStandardScheme();
      }
    }

    private static class getLastDoctorCases_resultStandardScheme extends StandardScheme<getLastDoctorCases_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastDoctorCases_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftCaseData>(_list48.size);
                  ThriftCaseData _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new ThriftCaseData();
                    _elem49.read(iprot);
                    struct.success.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastDoctorCases_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftCaseData _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastDoctorCases_resultTupleSchemeFactory implements SchemeFactory {
      public getLastDoctorCases_resultTupleScheme getScheme() {
        return new getLastDoctorCases_resultTupleScheme();
      }
    }

    private static class getLastDoctorCases_resultTupleScheme extends TupleScheme<getLastDoctorCases_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastDoctorCases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftCaseData _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastDoctorCases_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftCaseData>(_list53.size);
            ThriftCaseData _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new ThriftCaseData();
              _elem54.read(iprot);
              struct.success.add(_elem54);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getCaseDetail_args implements org.apache.thrift.TBase<getCaseDetail_args, getCaseDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCaseDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaseDetail_args");

    private static final org.apache.thrift.protocol.TField CASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("caseId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("patientId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCaseDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCaseDetail_argsTupleSchemeFactory());
    }

    public String caseId; // required
    public String patientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CASE_ID((short)1, "caseId"),
      PATIENT_ID((short)2, "patientId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CASE_ID
            return CASE_ID;
          case 2: // PATIENT_ID
            return PATIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CASE_ID, new org.apache.thrift.meta_data.FieldMetaData("caseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("patientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaseDetail_args.class, metaDataMap);
    }

    public getCaseDetail_args() {
    }

    public getCaseDetail_args(
      String caseId,
      String patientId)
    {
      this();
      this.caseId = caseId;
      this.patientId = patientId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCaseDetail_args(getCaseDetail_args other) {
      if (other.isSetCaseId()) {
        this.caseId = other.caseId;
      }
      if (other.isSetPatientId()) {
        this.patientId = other.patientId;
      }
    }

    public getCaseDetail_args deepCopy() {
      return new getCaseDetail_args(this);
    }

    @Override
    public void clear() {
      this.caseId = null;
      this.patientId = null;
    }

    public String getCaseId() {
      return this.caseId;
    }

    public getCaseDetail_args setCaseId(String caseId) {
      this.caseId = caseId;
      return this;
    }

    public void unsetCaseId() {
      this.caseId = null;
    }

    /** Returns true if field caseId is set (has been assigned a value) and false otherwise */
    public boolean isSetCaseId() {
      return this.caseId != null;
    }

    public void setCaseIdIsSet(boolean value) {
      if (!value) {
        this.caseId = null;
      }
    }

    public String getPatientId() {
      return this.patientId;
    }

    public getCaseDetail_args setPatientId(String patientId) {
      this.patientId = patientId;
      return this;
    }

    public void unsetPatientId() {
      this.patientId = null;
    }

    /** Returns true if field patientId is set (has been assigned a value) and false otherwise */
    public boolean isSetPatientId() {
      return this.patientId != null;
    }

    public void setPatientIdIsSet(boolean value) {
      if (!value) {
        this.patientId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CASE_ID:
        if (value == null) {
          unsetCaseId();
        } else {
          setCaseId((String)value);
        }
        break;

      case PATIENT_ID:
        if (value == null) {
          unsetPatientId();
        } else {
          setPatientId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CASE_ID:
        return getCaseId();

      case PATIENT_ID:
        return getPatientId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CASE_ID:
        return isSetCaseId();
      case PATIENT_ID:
        return isSetPatientId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCaseDetail_args)
        return this.equals((getCaseDetail_args)that);
      return false;
    }

    public boolean equals(getCaseDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_caseId = true && this.isSetCaseId();
      boolean that_present_caseId = true && that.isSetCaseId();
      if (this_present_caseId || that_present_caseId) {
        if (!(this_present_caseId && that_present_caseId))
          return false;
        if (!this.caseId.equals(that.caseId))
          return false;
      }

      boolean this_present_patientId = true && this.isSetPatientId();
      boolean that_present_patientId = true && that.isSetPatientId();
      if (this_present_patientId || that_present_patientId) {
        if (!(this_present_patientId && that_present_patientId))
          return false;
        if (!this.patientId.equals(that.patientId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_caseId = true && (isSetCaseId());
      list.add(present_caseId);
      if (present_caseId)
        list.add(caseId);

      boolean present_patientId = true && (isSetPatientId());
      list.add(present_patientId);
      if (present_patientId)
        list.add(patientId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCaseDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaseId()).compareTo(other.isSetCaseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseId, other.caseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPatientId()).compareTo(other.isSetPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patientId, other.patientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCaseDetail_args(");
      boolean first = true;

      sb.append("caseId:");
      if (this.caseId == null) {
        sb.append("null");
      } else {
        sb.append(this.caseId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("patientId:");
      if (this.patientId == null) {
        sb.append("null");
      } else {
        sb.append(this.patientId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCaseDetail_argsStandardSchemeFactory implements SchemeFactory {
      public getCaseDetail_argsStandardScheme getScheme() {
        return new getCaseDetail_argsStandardScheme();
      }
    }

    private static class getCaseDetail_argsStandardScheme extends StandardScheme<getCaseDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCaseDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CASE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.caseId = iprot.readString();
                struct.setCaseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.patientId = iprot.readString();
                struct.setPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCaseDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caseId != null) {
          oprot.writeFieldBegin(CASE_ID_FIELD_DESC);
          oprot.writeString(struct.caseId);
          oprot.writeFieldEnd();
        }
        if (struct.patientId != null) {
          oprot.writeFieldBegin(PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.patientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCaseDetail_argsTupleSchemeFactory implements SchemeFactory {
      public getCaseDetail_argsTupleScheme getScheme() {
        return new getCaseDetail_argsTupleScheme();
      }
    }

    private static class getCaseDetail_argsTupleScheme extends TupleScheme<getCaseDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaseId()) {
          optionals.set(0);
        }
        if (struct.isSetPatientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCaseId()) {
          oprot.writeString(struct.caseId);
        }
        if (struct.isSetPatientId()) {
          oprot.writeString(struct.patientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.caseId = iprot.readString();
          struct.setCaseIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.patientId = iprot.readString();
          struct.setPatientIdIsSet(true);
        }
      }
    }

  }

  public static class getCaseDetail_result implements org.apache.thrift.TBase<getCaseDetail_result, getCaseDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCaseDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCaseDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getCaseDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getCaseDetail_resultTupleSchemeFactory());
    }

    public ThriftCaseDetailData success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseDetailData.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCaseDetail_result.class, metaDataMap);
    }

    public getCaseDetail_result() {
    }

    public getCaseDetail_result(
      ThriftCaseDetailData success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCaseDetail_result(getCaseDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCaseDetailData(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getCaseDetail_result deepCopy() {
      return new getCaseDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public ThriftCaseDetailData getSuccess() {
      return this.success;
    }

    public getCaseDetail_result setSuccess(ThriftCaseDetailData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getCaseDetail_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCaseDetailData)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCaseDetail_result)
        return this.equals((getCaseDetail_result)that);
      return false;
    }

    public boolean equals(getCaseDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getCaseDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getCaseDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCaseDetail_resultStandardSchemeFactory implements SchemeFactory {
      public getCaseDetail_resultStandardScheme getScheme() {
        return new getCaseDetail_resultStandardScheme();
      }
    }

    private static class getCaseDetail_resultStandardScheme extends StandardScheme<getCaseDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCaseDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCaseDetailData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCaseDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCaseDetail_resultTupleSchemeFactory implements SchemeFactory {
      public getCaseDetail_resultTupleScheme getScheme() {
        return new getCaseDetail_resultTupleScheme();
      }
    }

    private static class getCaseDetail_resultTupleScheme extends TupleScheme<getCaseDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftCaseDetailData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class updateCaseDetail_args implements org.apache.thrift.TBase<updateCaseDetail_args, updateCaseDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateCaseDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCaseDetail_args");

    private static final org.apache.thrift.protocol.TField CASE_DETAIL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("caseDetailData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCaseDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCaseDetail_argsTupleSchemeFactory());
    }

    public ThriftCaseDetailData caseDetailData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CASE_DETAIL_DATA((short)1, "caseDetailData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CASE_DETAIL_DATA
            return CASE_DETAIL_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CASE_DETAIL_DATA, new org.apache.thrift.meta_data.FieldMetaData("caseDetailData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseDetailData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCaseDetail_args.class, metaDataMap);
    }

    public updateCaseDetail_args() {
    }

    public updateCaseDetail_args(
      ThriftCaseDetailData caseDetailData)
    {
      this();
      this.caseDetailData = caseDetailData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCaseDetail_args(updateCaseDetail_args other) {
      if (other.isSetCaseDetailData()) {
        this.caseDetailData = new ThriftCaseDetailData(other.caseDetailData);
      }
    }

    public updateCaseDetail_args deepCopy() {
      return new updateCaseDetail_args(this);
    }

    @Override
    public void clear() {
      this.caseDetailData = null;
    }

    public ThriftCaseDetailData getCaseDetailData() {
      return this.caseDetailData;
    }

    public updateCaseDetail_args setCaseDetailData(ThriftCaseDetailData caseDetailData) {
      this.caseDetailData = caseDetailData;
      return this;
    }

    public void unsetCaseDetailData() {
      this.caseDetailData = null;
    }

    /** Returns true if field caseDetailData is set (has been assigned a value) and false otherwise */
    public boolean isSetCaseDetailData() {
      return this.caseDetailData != null;
    }

    public void setCaseDetailDataIsSet(boolean value) {
      if (!value) {
        this.caseDetailData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CASE_DETAIL_DATA:
        if (value == null) {
          unsetCaseDetailData();
        } else {
          setCaseDetailData((ThriftCaseDetailData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CASE_DETAIL_DATA:
        return getCaseDetailData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CASE_DETAIL_DATA:
        return isSetCaseDetailData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCaseDetail_args)
        return this.equals((updateCaseDetail_args)that);
      return false;
    }

    public boolean equals(updateCaseDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_caseDetailData = true && this.isSetCaseDetailData();
      boolean that_present_caseDetailData = true && that.isSetCaseDetailData();
      if (this_present_caseDetailData || that_present_caseDetailData) {
        if (!(this_present_caseDetailData && that_present_caseDetailData))
          return false;
        if (!this.caseDetailData.equals(that.caseDetailData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_caseDetailData = true && (isSetCaseDetailData());
      list.add(present_caseDetailData);
      if (present_caseDetailData)
        list.add(caseDetailData);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCaseDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaseDetailData()).compareTo(other.isSetCaseDetailData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaseDetailData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseDetailData, other.caseDetailData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCaseDetail_args(");
      boolean first = true;

      sb.append("caseDetailData:");
      if (this.caseDetailData == null) {
        sb.append("null");
      } else {
        sb.append(this.caseDetailData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caseDetailData != null) {
        caseDetailData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCaseDetail_argsStandardSchemeFactory implements SchemeFactory {
      public updateCaseDetail_argsStandardScheme getScheme() {
        return new updateCaseDetail_argsStandardScheme();
      }
    }

    private static class updateCaseDetail_argsStandardScheme extends StandardScheme<updateCaseDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCaseDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CASE_DETAIL_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caseDetailData = new ThriftCaseDetailData();
                struct.caseDetailData.read(iprot);
                struct.setCaseDetailDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCaseDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caseDetailData != null) {
          oprot.writeFieldBegin(CASE_DETAIL_DATA_FIELD_DESC);
          struct.caseDetailData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCaseDetail_argsTupleSchemeFactory implements SchemeFactory {
      public updateCaseDetail_argsTupleScheme getScheme() {
        return new updateCaseDetail_argsTupleScheme();
      }
    }

    private static class updateCaseDetail_argsTupleScheme extends TupleScheme<updateCaseDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaseDetailData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaseDetailData()) {
          struct.caseDetailData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caseDetailData = new ThriftCaseDetailData();
          struct.caseDetailData.read(iprot);
          struct.setCaseDetailDataIsSet(true);
        }
      }
    }

  }

  public static class updateCaseDetail_result implements org.apache.thrift.TBase<updateCaseDetail_result, updateCaseDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateCaseDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateCaseDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateCaseDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateCaseDetail_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateCaseDetail_result.class, metaDataMap);
    }

    public updateCaseDetail_result() {
    }

    public updateCaseDetail_result(
      boolean success,
      ThriftException ex)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCaseDetail_result(updateCaseDetail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public updateCaseDetail_result deepCopy() {
      return new updateCaseDetail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.ex = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateCaseDetail_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public updateCaseDetail_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCaseDetail_result)
        return this.equals((updateCaseDetail_result)that);
      return false;
    }

    public boolean equals(updateCaseDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateCaseDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateCaseDetail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateCaseDetail_resultStandardSchemeFactory implements SchemeFactory {
      public updateCaseDetail_resultStandardScheme getScheme() {
        return new updateCaseDetail_resultStandardScheme();
      }
    }

    private static class updateCaseDetail_resultStandardScheme extends StandardScheme<updateCaseDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateCaseDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateCaseDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateCaseDetail_resultTupleSchemeFactory implements SchemeFactory {
      public updateCaseDetail_resultTupleScheme getScheme() {
        return new updateCaseDetail_resultTupleScheme();
      }
    }

    private static class updateCaseDetail_resultTupleScheme extends TupleScheme<updateCaseDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class insertCaseDetail_args implements org.apache.thrift.TBase<insertCaseDetail_args, insertCaseDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertCaseDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCaseDetail_args");

    private static final org.apache.thrift.protocol.TField CASE_DETAIL_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("caseDetailData", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCaseDetail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCaseDetail_argsTupleSchemeFactory());
    }

    public ThriftCaseDetailData caseDetailData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CASE_DETAIL_DATA((short)1, "caseDetailData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CASE_DETAIL_DATA
            return CASE_DETAIL_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CASE_DETAIL_DATA, new org.apache.thrift.meta_data.FieldMetaData("caseDetailData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseDetailData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCaseDetail_args.class, metaDataMap);
    }

    public insertCaseDetail_args() {
    }

    public insertCaseDetail_args(
      ThriftCaseDetailData caseDetailData)
    {
      this();
      this.caseDetailData = caseDetailData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCaseDetail_args(insertCaseDetail_args other) {
      if (other.isSetCaseDetailData()) {
        this.caseDetailData = new ThriftCaseDetailData(other.caseDetailData);
      }
    }

    public insertCaseDetail_args deepCopy() {
      return new insertCaseDetail_args(this);
    }

    @Override
    public void clear() {
      this.caseDetailData = null;
    }

    public ThriftCaseDetailData getCaseDetailData() {
      return this.caseDetailData;
    }

    public insertCaseDetail_args setCaseDetailData(ThriftCaseDetailData caseDetailData) {
      this.caseDetailData = caseDetailData;
      return this;
    }

    public void unsetCaseDetailData() {
      this.caseDetailData = null;
    }

    /** Returns true if field caseDetailData is set (has been assigned a value) and false otherwise */
    public boolean isSetCaseDetailData() {
      return this.caseDetailData != null;
    }

    public void setCaseDetailDataIsSet(boolean value) {
      if (!value) {
        this.caseDetailData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CASE_DETAIL_DATA:
        if (value == null) {
          unsetCaseDetailData();
        } else {
          setCaseDetailData((ThriftCaseDetailData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CASE_DETAIL_DATA:
        return getCaseDetailData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CASE_DETAIL_DATA:
        return isSetCaseDetailData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCaseDetail_args)
        return this.equals((insertCaseDetail_args)that);
      return false;
    }

    public boolean equals(insertCaseDetail_args that) {
      if (that == null)
        return false;

      boolean this_present_caseDetailData = true && this.isSetCaseDetailData();
      boolean that_present_caseDetailData = true && that.isSetCaseDetailData();
      if (this_present_caseDetailData || that_present_caseDetailData) {
        if (!(this_present_caseDetailData && that_present_caseDetailData))
          return false;
        if (!this.caseDetailData.equals(that.caseDetailData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_caseDetailData = true && (isSetCaseDetailData());
      list.add(present_caseDetailData);
      if (present_caseDetailData)
        list.add(caseDetailData);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertCaseDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaseDetailData()).compareTo(other.isSetCaseDetailData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaseDetailData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseDetailData, other.caseDetailData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCaseDetail_args(");
      boolean first = true;

      sb.append("caseDetailData:");
      if (this.caseDetailData == null) {
        sb.append("null");
      } else {
        sb.append(this.caseDetailData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caseDetailData != null) {
        caseDetailData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCaseDetail_argsStandardSchemeFactory implements SchemeFactory {
      public insertCaseDetail_argsStandardScheme getScheme() {
        return new insertCaseDetail_argsStandardScheme();
      }
    }

    private static class insertCaseDetail_argsStandardScheme extends StandardScheme<insertCaseDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCaseDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CASE_DETAIL_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caseDetailData = new ThriftCaseDetailData();
                struct.caseDetailData.read(iprot);
                struct.setCaseDetailDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCaseDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caseDetailData != null) {
          oprot.writeFieldBegin(CASE_DETAIL_DATA_FIELD_DESC);
          struct.caseDetailData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCaseDetail_argsTupleSchemeFactory implements SchemeFactory {
      public insertCaseDetail_argsTupleScheme getScheme() {
        return new insertCaseDetail_argsTupleScheme();
      }
    }

    private static class insertCaseDetail_argsTupleScheme extends TupleScheme<insertCaseDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaseDetailData()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaseDetailData()) {
          struct.caseDetailData.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCaseDetail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caseDetailData = new ThriftCaseDetailData();
          struct.caseDetailData.read(iprot);
          struct.setCaseDetailDataIsSet(true);
        }
      }
    }

  }

  public static class insertCaseDetail_result implements org.apache.thrift.TBase<insertCaseDetail_result, insertCaseDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertCaseDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertCaseDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertCaseDetail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertCaseDetail_resultTupleSchemeFactory());
    }

    public ThriftCaseDetailData success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCaseDetailData.class)));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertCaseDetail_result.class, metaDataMap);
    }

    public insertCaseDetail_result() {
    }

    public insertCaseDetail_result(
      ThriftCaseDetailData success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertCaseDetail_result(insertCaseDetail_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCaseDetailData(other.success);
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public insertCaseDetail_result deepCopy() {
      return new insertCaseDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public ThriftCaseDetailData getSuccess() {
      return this.success;
    }

    public insertCaseDetail_result setSuccess(ThriftCaseDetailData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public insertCaseDetail_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCaseDetailData)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertCaseDetail_result)
        return this.equals((insertCaseDetail_result)that);
      return false;
    }

    public boolean equals(insertCaseDetail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(insertCaseDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertCaseDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertCaseDetail_resultStandardSchemeFactory implements SchemeFactory {
      public insertCaseDetail_resultStandardScheme getScheme() {
        return new insertCaseDetail_resultStandardScheme();
      }
    }

    private static class insertCaseDetail_resultStandardScheme extends StandardScheme<insertCaseDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertCaseDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCaseDetailData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertCaseDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertCaseDetail_resultTupleSchemeFactory implements SchemeFactory {
      public insertCaseDetail_resultTupleScheme getScheme() {
        return new insertCaseDetail_resultTupleScheme();
      }
    }

    private static class insertCaseDetail_resultTupleScheme extends TupleScheme<insertCaseDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertCaseDetail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftCaseDetailData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

  public static class getLastDoctorMedications_args implements org.apache.thrift.TBase<getLastDoctorMedications_args, getLastDoctorMedications_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLastDoctorMedications_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastDoctorMedications_args");

    private static final org.apache.thrift.protocol.TField DOCTOR_PATIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("doctorPatientId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIST_SIZE_MAX_FIELD_DESC = new org.apache.thrift.protocol.TField("listSizeMax", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastDoctorMedications_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastDoctorMedications_argsTupleSchemeFactory());
    }

    public String doctorPatientId; // required
    public int listSizeMax; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCTOR_PATIENT_ID((short)1, "doctorPatientId"),
      LIST_SIZE_MAX((short)2, "listSizeMax");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCTOR_PATIENT_ID
            return DOCTOR_PATIENT_ID;
          case 2: // LIST_SIZE_MAX
            return LIST_SIZE_MAX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LISTSIZEMAX_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCTOR_PATIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("doctorPatientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIST_SIZE_MAX, new org.apache.thrift.meta_data.FieldMetaData("listSizeMax", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastDoctorMedications_args.class, metaDataMap);
    }

    public getLastDoctorMedications_args() {
    }

    public getLastDoctorMedications_args(
      String doctorPatientId,
      int listSizeMax)
    {
      this();
      this.doctorPatientId = doctorPatientId;
      this.listSizeMax = listSizeMax;
      setListSizeMaxIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastDoctorMedications_args(getLastDoctorMedications_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDoctorPatientId()) {
        this.doctorPatientId = other.doctorPatientId;
      }
      this.listSizeMax = other.listSizeMax;
    }

    public getLastDoctorMedications_args deepCopy() {
      return new getLastDoctorMedications_args(this);
    }

    @Override
    public void clear() {
      this.doctorPatientId = null;
      setListSizeMaxIsSet(false);
      this.listSizeMax = 0;
    }

    public String getDoctorPatientId() {
      return this.doctorPatientId;
    }

    public getLastDoctorMedications_args setDoctorPatientId(String doctorPatientId) {
      this.doctorPatientId = doctorPatientId;
      return this;
    }

    public void unsetDoctorPatientId() {
      this.doctorPatientId = null;
    }

    /** Returns true if field doctorPatientId is set (has been assigned a value) and false otherwise */
    public boolean isSetDoctorPatientId() {
      return this.doctorPatientId != null;
    }

    public void setDoctorPatientIdIsSet(boolean value) {
      if (!value) {
        this.doctorPatientId = null;
      }
    }

    public int getListSizeMax() {
      return this.listSizeMax;
    }

    public getLastDoctorMedications_args setListSizeMax(int listSizeMax) {
      this.listSizeMax = listSizeMax;
      setListSizeMaxIsSet(true);
      return this;
    }

    public void unsetListSizeMax() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID);
    }

    /** Returns true if field listSizeMax is set (has been assigned a value) and false otherwise */
    public boolean isSetListSizeMax() {
      return EncodingUtils.testBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID);
    }

    public void setListSizeMaxIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LISTSIZEMAX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOCTOR_PATIENT_ID:
        if (value == null) {
          unsetDoctorPatientId();
        } else {
          setDoctorPatientId((String)value);
        }
        break;

      case LIST_SIZE_MAX:
        if (value == null) {
          unsetListSizeMax();
        } else {
          setListSizeMax((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCTOR_PATIENT_ID:
        return getDoctorPatientId();

      case LIST_SIZE_MAX:
        return getListSizeMax();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOCTOR_PATIENT_ID:
        return isSetDoctorPatientId();
      case LIST_SIZE_MAX:
        return isSetListSizeMax();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastDoctorMedications_args)
        return this.equals((getLastDoctorMedications_args)that);
      return false;
    }

    public boolean equals(getLastDoctorMedications_args that) {
      if (that == null)
        return false;

      boolean this_present_doctorPatientId = true && this.isSetDoctorPatientId();
      boolean that_present_doctorPatientId = true && that.isSetDoctorPatientId();
      if (this_present_doctorPatientId || that_present_doctorPatientId) {
        if (!(this_present_doctorPatientId && that_present_doctorPatientId))
          return false;
        if (!this.doctorPatientId.equals(that.doctorPatientId))
          return false;
      }

      boolean this_present_listSizeMax = true;
      boolean that_present_listSizeMax = true;
      if (this_present_listSizeMax || that_present_listSizeMax) {
        if (!(this_present_listSizeMax && that_present_listSizeMax))
          return false;
        if (this.listSizeMax != that.listSizeMax)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_doctorPatientId = true && (isSetDoctorPatientId());
      list.add(present_doctorPatientId);
      if (present_doctorPatientId)
        list.add(doctorPatientId);

      boolean present_listSizeMax = true;
      list.add(present_listSizeMax);
      if (present_listSizeMax)
        list.add(listSizeMax);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastDoctorMedications_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDoctorPatientId()).compareTo(other.isSetDoctorPatientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDoctorPatientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctorPatientId, other.doctorPatientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetListSizeMax()).compareTo(other.isSetListSizeMax());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListSizeMax()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listSizeMax, other.listSizeMax);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastDoctorMedications_args(");
      boolean first = true;

      sb.append("doctorPatientId:");
      if (this.doctorPatientId == null) {
        sb.append("null");
      } else {
        sb.append(this.doctorPatientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("listSizeMax:");
      sb.append(this.listSizeMax);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastDoctorMedications_argsStandardSchemeFactory implements SchemeFactory {
      public getLastDoctorMedications_argsStandardScheme getScheme() {
        return new getLastDoctorMedications_argsStandardScheme();
      }
    }

    private static class getLastDoctorMedications_argsStandardScheme extends StandardScheme<getLastDoctorMedications_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastDoctorMedications_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCTOR_PATIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.doctorPatientId = iprot.readString();
                struct.setDoctorPatientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIST_SIZE_MAX
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.listSizeMax = iprot.readI32();
                struct.setListSizeMaxIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastDoctorMedications_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.doctorPatientId != null) {
          oprot.writeFieldBegin(DOCTOR_PATIENT_ID_FIELD_DESC);
          oprot.writeString(struct.doctorPatientId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIST_SIZE_MAX_FIELD_DESC);
        oprot.writeI32(struct.listSizeMax);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastDoctorMedications_argsTupleSchemeFactory implements SchemeFactory {
      public getLastDoctorMedications_argsTupleScheme getScheme() {
        return new getLastDoctorMedications_argsTupleScheme();
      }
    }

    private static class getLastDoctorMedications_argsTupleScheme extends TupleScheme<getLastDoctorMedications_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastDoctorMedications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDoctorPatientId()) {
          optionals.set(0);
        }
        if (struct.isSetListSizeMax()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDoctorPatientId()) {
          oprot.writeString(struct.doctorPatientId);
        }
        if (struct.isSetListSizeMax()) {
          oprot.writeI32(struct.listSizeMax);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastDoctorMedications_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.doctorPatientId = iprot.readString();
          struct.setDoctorPatientIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.listSizeMax = iprot.readI32();
          struct.setListSizeMaxIsSet(true);
        }
      }
    }

  }

  public static class getLastDoctorMedications_result implements org.apache.thrift.TBase<getLastDoctorMedications_result, getLastDoctorMedications_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLastDoctorMedications_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLastDoctorMedications_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField EX_FIELD_DESC = new org.apache.thrift.protocol.TField("ex", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLastDoctorMedications_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLastDoctorMedications_resultTupleSchemeFactory());
    }

    public List<ThriftSectionMedicationData> success; // required
    public ThriftException ex; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EX((short)1, "ex");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EX
            return EX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftSectionMedicationData.class))));
      tmpMap.put(_Fields.EX, new org.apache.thrift.meta_data.FieldMetaData("ex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLastDoctorMedications_result.class, metaDataMap);
    }

    public getLastDoctorMedications_result() {
    }

    public getLastDoctorMedications_result(
      List<ThriftSectionMedicationData> success,
      ThriftException ex)
    {
      this();
      this.success = success;
      this.ex = ex;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastDoctorMedications_result(getLastDoctorMedications_result other) {
      if (other.isSetSuccess()) {
        List<ThriftSectionMedicationData> __this__success = new ArrayList<ThriftSectionMedicationData>(other.success.size());
        for (ThriftSectionMedicationData other_element : other.success) {
          __this__success.add(new ThriftSectionMedicationData(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetEx()) {
        this.ex = new ThriftException(other.ex);
      }
    }

    public getLastDoctorMedications_result deepCopy() {
      return new getLastDoctorMedications_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ex = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ThriftSectionMedicationData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ThriftSectionMedicationData elem) {
      if (this.success == null) {
        this.success = new ArrayList<ThriftSectionMedicationData>();
      }
      this.success.add(elem);
    }

    public List<ThriftSectionMedicationData> getSuccess() {
      return this.success;
    }

    public getLastDoctorMedications_result setSuccess(List<ThriftSectionMedicationData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ThriftException getEx() {
      return this.ex;
    }

    public getLastDoctorMedications_result setEx(ThriftException ex) {
      this.ex = ex;
      return this;
    }

    public void unsetEx() {
      this.ex = null;
    }

    /** Returns true if field ex is set (has been assigned a value) and false otherwise */
    public boolean isSetEx() {
      return this.ex != null;
    }

    public void setExIsSet(boolean value) {
      if (!value) {
        this.ex = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ThriftSectionMedicationData>)value);
        }
        break;

      case EX:
        if (value == null) {
          unsetEx();
        } else {
          setEx((ThriftException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EX:
        return getEx();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EX:
        return isSetEx();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastDoctorMedications_result)
        return this.equals((getLastDoctorMedications_result)that);
      return false;
    }

    public boolean equals(getLastDoctorMedications_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ex = true && this.isSetEx();
      boolean that_present_ex = true && that.isSetEx();
      if (this_present_ex || that_present_ex) {
        if (!(this_present_ex && that_present_ex))
          return false;
        if (!this.ex.equals(that.ex))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ex = true && (isSetEx());
      list.add(present_ex);
      if (present_ex)
        list.add(ex);

      return list.hashCode();
    }

    @Override
    public int compareTo(getLastDoctorMedications_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEx()).compareTo(other.isSetEx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEx()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ex, other.ex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLastDoctorMedications_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ex:");
      if (this.ex == null) {
        sb.append("null");
      } else {
        sb.append(this.ex);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLastDoctorMedications_resultStandardSchemeFactory implements SchemeFactory {
      public getLastDoctorMedications_resultStandardScheme getScheme() {
        return new getLastDoctorMedications_resultStandardScheme();
      }
    }

    private static class getLastDoctorMedications_resultStandardScheme extends StandardScheme<getLastDoctorMedications_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLastDoctorMedications_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<ThriftSectionMedicationData>(_list56.size);
                  ThriftSectionMedicationData _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new ThriftSectionMedicationData();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ex = new ThriftException();
                struct.ex.read(iprot);
                struct.setExIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLastDoctorMedications_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ThriftSectionMedicationData _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ex != null) {
          oprot.writeFieldBegin(EX_FIELD_DESC);
          struct.ex.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLastDoctorMedications_resultTupleSchemeFactory implements SchemeFactory {
      public getLastDoctorMedications_resultTupleScheme getScheme() {
        return new getLastDoctorMedications_resultTupleScheme();
      }
    }

    private static class getLastDoctorMedications_resultTupleScheme extends TupleScheme<getLastDoctorMedications_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLastDoctorMedications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetEx()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ThriftSectionMedicationData _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
        if (struct.isSetEx()) {
          struct.ex.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLastDoctorMedications_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ThriftSectionMedicationData>(_list61.size);
            ThriftSectionMedicationData _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new ThriftSectionMedicationData();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ex = new ThriftException();
          struct.ex.read(iprot);
          struct.setExIsSet(true);
        }
      }
    }

  }

}
