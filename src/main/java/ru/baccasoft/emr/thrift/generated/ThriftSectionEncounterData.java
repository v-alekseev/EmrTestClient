/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ru.baccasoft.emr.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-12-15")
public class ThriftSectionEncounterData implements org.apache.thrift.TBase<ThriftSectionEncounterData, ThriftSectionEncounterData._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSectionEncounterData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSectionEncounterData");

  private static final org.apache.thrift.protocol.TField HOSPITAL_FIELD_DESC = new org.apache.thrift.protocol.TField("hospital", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField INTERACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("interactionType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOCTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("doctor", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("startDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("endDate", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ENCOUNTER_OUTCOME_FIELD_DESC = new org.apache.thrift.protocol.TField("encounterOutcome", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CASE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("caseNumber", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSectionEncounterDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSectionEncounterDataTupleSchemeFactory());
  }

  public String hospital; // required
  public String department; // required
  public String interactionType; // required
  public String doctor; // required
  public String startDate; // required
  public String endDate; // required
  public String encounterOutcome; // required
  public String caseNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSPITAL((short)1, "hospital"),
    DEPARTMENT((short)2, "department"),
    INTERACTION_TYPE((short)3, "interactionType"),
    DOCTOR((short)4, "doctor"),
    START_DATE((short)5, "startDate"),
    END_DATE((short)6, "endDate"),
    ENCOUNTER_OUTCOME((short)7, "encounterOutcome"),
    CASE_NUMBER((short)8, "caseNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSPITAL
          return HOSPITAL;
        case 2: // DEPARTMENT
          return DEPARTMENT;
        case 3: // INTERACTION_TYPE
          return INTERACTION_TYPE;
        case 4: // DOCTOR
          return DOCTOR;
        case 5: // START_DATE
          return START_DATE;
        case 6: // END_DATE
          return END_DATE;
        case 7: // ENCOUNTER_OUTCOME
          return ENCOUNTER_OUTCOME;
        case 8: // CASE_NUMBER
          return CASE_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSPITAL, new org.apache.thrift.meta_data.FieldMetaData("hospital", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INTERACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("interactionType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOCTOR, new org.apache.thrift.meta_data.FieldMetaData("doctor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("startDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("endDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENCOUNTER_OUTCOME, new org.apache.thrift.meta_data.FieldMetaData("encounterOutcome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CASE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("caseNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSectionEncounterData.class, metaDataMap);
  }

  public ThriftSectionEncounterData() {
  }

  public ThriftSectionEncounterData(
    String hospital,
    String department,
    String interactionType,
    String doctor,
    String startDate,
    String endDate,
    String encounterOutcome,
    String caseNumber)
  {
    this();
    this.hospital = hospital;
    this.department = department;
    this.interactionType = interactionType;
    this.doctor = doctor;
    this.startDate = startDate;
    this.endDate = endDate;
    this.encounterOutcome = encounterOutcome;
    this.caseNumber = caseNumber;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSectionEncounterData(ThriftSectionEncounterData other) {
    if (other.isSetHospital()) {
      this.hospital = other.hospital;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetInteractionType()) {
      this.interactionType = other.interactionType;
    }
    if (other.isSetDoctor()) {
      this.doctor = other.doctor;
    }
    if (other.isSetStartDate()) {
      this.startDate = other.startDate;
    }
    if (other.isSetEndDate()) {
      this.endDate = other.endDate;
    }
    if (other.isSetEncounterOutcome()) {
      this.encounterOutcome = other.encounterOutcome;
    }
    if (other.isSetCaseNumber()) {
      this.caseNumber = other.caseNumber;
    }
  }

  public ThriftSectionEncounterData deepCopy() {
    return new ThriftSectionEncounterData(this);
  }

  @Override
  public void clear() {
    this.hospital = null;
    this.department = null;
    this.interactionType = null;
    this.doctor = null;
    this.startDate = null;
    this.endDate = null;
    this.encounterOutcome = null;
    this.caseNumber = null;
  }

  public String getHospital() {
    return this.hospital;
  }

  public ThriftSectionEncounterData setHospital(String hospital) {
    this.hospital = hospital;
    return this;
  }

  public void unsetHospital() {
    this.hospital = null;
  }

  /** Returns true if field hospital is set (has been assigned a value) and false otherwise */
  public boolean isSetHospital() {
    return this.hospital != null;
  }

  public void setHospitalIsSet(boolean value) {
    if (!value) {
      this.hospital = null;
    }
  }

  public String getDepartment() {
    return this.department;
  }

  public ThriftSectionEncounterData setDepartment(String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  public String getInteractionType() {
    return this.interactionType;
  }

  public ThriftSectionEncounterData setInteractionType(String interactionType) {
    this.interactionType = interactionType;
    return this;
  }

  public void unsetInteractionType() {
    this.interactionType = null;
  }

  /** Returns true if field interactionType is set (has been assigned a value) and false otherwise */
  public boolean isSetInteractionType() {
    return this.interactionType != null;
  }

  public void setInteractionTypeIsSet(boolean value) {
    if (!value) {
      this.interactionType = null;
    }
  }

  public String getDoctor() {
    return this.doctor;
  }

  public ThriftSectionEncounterData setDoctor(String doctor) {
    this.doctor = doctor;
    return this;
  }

  public void unsetDoctor() {
    this.doctor = null;
  }

  /** Returns true if field doctor is set (has been assigned a value) and false otherwise */
  public boolean isSetDoctor() {
    return this.doctor != null;
  }

  public void setDoctorIsSet(boolean value) {
    if (!value) {
      this.doctor = null;
    }
  }

  public String getStartDate() {
    return this.startDate;
  }

  public ThriftSectionEncounterData setStartDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  public void unsetStartDate() {
    this.startDate = null;
  }

  /** Returns true if field startDate is set (has been assigned a value) and false otherwise */
  public boolean isSetStartDate() {
    return this.startDate != null;
  }

  public void setStartDateIsSet(boolean value) {
    if (!value) {
      this.startDate = null;
    }
  }

  public String getEndDate() {
    return this.endDate;
  }

  public ThriftSectionEncounterData setEndDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  public void unsetEndDate() {
    this.endDate = null;
  }

  /** Returns true if field endDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEndDate() {
    return this.endDate != null;
  }

  public void setEndDateIsSet(boolean value) {
    if (!value) {
      this.endDate = null;
    }
  }

  public String getEncounterOutcome() {
    return this.encounterOutcome;
  }

  public ThriftSectionEncounterData setEncounterOutcome(String encounterOutcome) {
    this.encounterOutcome = encounterOutcome;
    return this;
  }

  public void unsetEncounterOutcome() {
    this.encounterOutcome = null;
  }

  /** Returns true if field encounterOutcome is set (has been assigned a value) and false otherwise */
  public boolean isSetEncounterOutcome() {
    return this.encounterOutcome != null;
  }

  public void setEncounterOutcomeIsSet(boolean value) {
    if (!value) {
      this.encounterOutcome = null;
    }
  }

  public String getCaseNumber() {
    return this.caseNumber;
  }

  public ThriftSectionEncounterData setCaseNumber(String caseNumber) {
    this.caseNumber = caseNumber;
    return this;
  }

  public void unsetCaseNumber() {
    this.caseNumber = null;
  }

  /** Returns true if field caseNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCaseNumber() {
    return this.caseNumber != null;
  }

  public void setCaseNumberIsSet(boolean value) {
    if (!value) {
      this.caseNumber = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSPITAL:
      if (value == null) {
        unsetHospital();
      } else {
        setHospital((String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((String)value);
      }
      break;

    case INTERACTION_TYPE:
      if (value == null) {
        unsetInteractionType();
      } else {
        setInteractionType((String)value);
      }
      break;

    case DOCTOR:
      if (value == null) {
        unsetDoctor();
      } else {
        setDoctor((String)value);
      }
      break;

    case START_DATE:
      if (value == null) {
        unsetStartDate();
      } else {
        setStartDate((String)value);
      }
      break;

    case END_DATE:
      if (value == null) {
        unsetEndDate();
      } else {
        setEndDate((String)value);
      }
      break;

    case ENCOUNTER_OUTCOME:
      if (value == null) {
        unsetEncounterOutcome();
      } else {
        setEncounterOutcome((String)value);
      }
      break;

    case CASE_NUMBER:
      if (value == null) {
        unsetCaseNumber();
      } else {
        setCaseNumber((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSPITAL:
      return getHospital();

    case DEPARTMENT:
      return getDepartment();

    case INTERACTION_TYPE:
      return getInteractionType();

    case DOCTOR:
      return getDoctor();

    case START_DATE:
      return getStartDate();

    case END_DATE:
      return getEndDate();

    case ENCOUNTER_OUTCOME:
      return getEncounterOutcome();

    case CASE_NUMBER:
      return getCaseNumber();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSPITAL:
      return isSetHospital();
    case DEPARTMENT:
      return isSetDepartment();
    case INTERACTION_TYPE:
      return isSetInteractionType();
    case DOCTOR:
      return isSetDoctor();
    case START_DATE:
      return isSetStartDate();
    case END_DATE:
      return isSetEndDate();
    case ENCOUNTER_OUTCOME:
      return isSetEncounterOutcome();
    case CASE_NUMBER:
      return isSetCaseNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSectionEncounterData)
      return this.equals((ThriftSectionEncounterData)that);
    return false;
  }

  public boolean equals(ThriftSectionEncounterData that) {
    if (that == null)
      return false;

    boolean this_present_hospital = true && this.isSetHospital();
    boolean that_present_hospital = true && that.isSetHospital();
    if (this_present_hospital || that_present_hospital) {
      if (!(this_present_hospital && that_present_hospital))
        return false;
      if (!this.hospital.equals(that.hospital))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_interactionType = true && this.isSetInteractionType();
    boolean that_present_interactionType = true && that.isSetInteractionType();
    if (this_present_interactionType || that_present_interactionType) {
      if (!(this_present_interactionType && that_present_interactionType))
        return false;
      if (!this.interactionType.equals(that.interactionType))
        return false;
    }

    boolean this_present_doctor = true && this.isSetDoctor();
    boolean that_present_doctor = true && that.isSetDoctor();
    if (this_present_doctor || that_present_doctor) {
      if (!(this_present_doctor && that_present_doctor))
        return false;
      if (!this.doctor.equals(that.doctor))
        return false;
    }

    boolean this_present_startDate = true && this.isSetStartDate();
    boolean that_present_startDate = true && that.isSetStartDate();
    if (this_present_startDate || that_present_startDate) {
      if (!(this_present_startDate && that_present_startDate))
        return false;
      if (!this.startDate.equals(that.startDate))
        return false;
    }

    boolean this_present_endDate = true && this.isSetEndDate();
    boolean that_present_endDate = true && that.isSetEndDate();
    if (this_present_endDate || that_present_endDate) {
      if (!(this_present_endDate && that_present_endDate))
        return false;
      if (!this.endDate.equals(that.endDate))
        return false;
    }

    boolean this_present_encounterOutcome = true && this.isSetEncounterOutcome();
    boolean that_present_encounterOutcome = true && that.isSetEncounterOutcome();
    if (this_present_encounterOutcome || that_present_encounterOutcome) {
      if (!(this_present_encounterOutcome && that_present_encounterOutcome))
        return false;
      if (!this.encounterOutcome.equals(that.encounterOutcome))
        return false;
    }

    boolean this_present_caseNumber = true && this.isSetCaseNumber();
    boolean that_present_caseNumber = true && that.isSetCaseNumber();
    if (this_present_caseNumber || that_present_caseNumber) {
      if (!(this_present_caseNumber && that_present_caseNumber))
        return false;
      if (!this.caseNumber.equals(that.caseNumber))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hospital = true && (isSetHospital());
    list.add(present_hospital);
    if (present_hospital)
      list.add(hospital);

    boolean present_department = true && (isSetDepartment());
    list.add(present_department);
    if (present_department)
      list.add(department);

    boolean present_interactionType = true && (isSetInteractionType());
    list.add(present_interactionType);
    if (present_interactionType)
      list.add(interactionType);

    boolean present_doctor = true && (isSetDoctor());
    list.add(present_doctor);
    if (present_doctor)
      list.add(doctor);

    boolean present_startDate = true && (isSetStartDate());
    list.add(present_startDate);
    if (present_startDate)
      list.add(startDate);

    boolean present_endDate = true && (isSetEndDate());
    list.add(present_endDate);
    if (present_endDate)
      list.add(endDate);

    boolean present_encounterOutcome = true && (isSetEncounterOutcome());
    list.add(present_encounterOutcome);
    if (present_encounterOutcome)
      list.add(encounterOutcome);

    boolean present_caseNumber = true && (isSetCaseNumber());
    list.add(present_caseNumber);
    if (present_caseNumber)
      list.add(caseNumber);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSectionEncounterData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHospital()).compareTo(other.isSetHospital());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHospital()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hospital, other.hospital);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInteractionType()).compareTo(other.isSetInteractionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInteractionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.interactionType, other.interactionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDoctor()).compareTo(other.isSetDoctor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDoctor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.doctor, other.doctor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartDate()).compareTo(other.isSetStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startDate, other.startDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndDate()).compareTo(other.isSetEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endDate, other.endDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEncounterOutcome()).compareTo(other.isSetEncounterOutcome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEncounterOutcome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encounterOutcome, other.encounterOutcome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCaseNumber()).compareTo(other.isSetCaseNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCaseNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caseNumber, other.caseNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSectionEncounterData(");
    boolean first = true;

    sb.append("hospital:");
    if (this.hospital == null) {
      sb.append("null");
    } else {
      sb.append(this.hospital);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("department:");
    if (this.department == null) {
      sb.append("null");
    } else {
      sb.append(this.department);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("interactionType:");
    if (this.interactionType == null) {
      sb.append("null");
    } else {
      sb.append(this.interactionType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("doctor:");
    if (this.doctor == null) {
      sb.append("null");
    } else {
      sb.append(this.doctor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startDate:");
    if (this.startDate == null) {
      sb.append("null");
    } else {
      sb.append(this.startDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endDate:");
    if (this.endDate == null) {
      sb.append("null");
    } else {
      sb.append(this.endDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("encounterOutcome:");
    if (this.encounterOutcome == null) {
      sb.append("null");
    } else {
      sb.append(this.encounterOutcome);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("caseNumber:");
    if (this.caseNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.caseNumber);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSectionEncounterDataStandardSchemeFactory implements SchemeFactory {
    public ThriftSectionEncounterDataStandardScheme getScheme() {
      return new ThriftSectionEncounterDataStandardScheme();
    }
  }

  private static class ThriftSectionEncounterDataStandardScheme extends StandardScheme<ThriftSectionEncounterData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSectionEncounterData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSPITAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hospital = iprot.readString();
              struct.setHospitalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INTERACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.interactionType = iprot.readString();
              struct.setInteractionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOCTOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.doctor = iprot.readString();
              struct.setDoctorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startDate = iprot.readString();
              struct.setStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endDate = iprot.readString();
              struct.setEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ENCOUNTER_OUTCOME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.encounterOutcome = iprot.readString();
              struct.setEncounterOutcomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CASE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.caseNumber = iprot.readString();
              struct.setCaseNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSectionEncounterData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hospital != null) {
        oprot.writeFieldBegin(HOSPITAL_FIELD_DESC);
        oprot.writeString(struct.hospital);
        oprot.writeFieldEnd();
      }
      if (struct.department != null) {
        oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
        oprot.writeString(struct.department);
        oprot.writeFieldEnd();
      }
      if (struct.interactionType != null) {
        oprot.writeFieldBegin(INTERACTION_TYPE_FIELD_DESC);
        oprot.writeString(struct.interactionType);
        oprot.writeFieldEnd();
      }
      if (struct.doctor != null) {
        oprot.writeFieldBegin(DOCTOR_FIELD_DESC);
        oprot.writeString(struct.doctor);
        oprot.writeFieldEnd();
      }
      if (struct.startDate != null) {
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeString(struct.startDate);
        oprot.writeFieldEnd();
      }
      if (struct.endDate != null) {
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeString(struct.endDate);
        oprot.writeFieldEnd();
      }
      if (struct.encounterOutcome != null) {
        oprot.writeFieldBegin(ENCOUNTER_OUTCOME_FIELD_DESC);
        oprot.writeString(struct.encounterOutcome);
        oprot.writeFieldEnd();
      }
      if (struct.caseNumber != null) {
        oprot.writeFieldBegin(CASE_NUMBER_FIELD_DESC);
        oprot.writeString(struct.caseNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSectionEncounterDataTupleSchemeFactory implements SchemeFactory {
    public ThriftSectionEncounterDataTupleScheme getScheme() {
      return new ThriftSectionEncounterDataTupleScheme();
    }
  }

  private static class ThriftSectionEncounterDataTupleScheme extends TupleScheme<ThriftSectionEncounterData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSectionEncounterData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetHospital()) {
        optionals.set(0);
      }
      if (struct.isSetDepartment()) {
        optionals.set(1);
      }
      if (struct.isSetInteractionType()) {
        optionals.set(2);
      }
      if (struct.isSetDoctor()) {
        optionals.set(3);
      }
      if (struct.isSetStartDate()) {
        optionals.set(4);
      }
      if (struct.isSetEndDate()) {
        optionals.set(5);
      }
      if (struct.isSetEncounterOutcome()) {
        optionals.set(6);
      }
      if (struct.isSetCaseNumber()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetHospital()) {
        oprot.writeString(struct.hospital);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetInteractionType()) {
        oprot.writeString(struct.interactionType);
      }
      if (struct.isSetDoctor()) {
        oprot.writeString(struct.doctor);
      }
      if (struct.isSetStartDate()) {
        oprot.writeString(struct.startDate);
      }
      if (struct.isSetEndDate()) {
        oprot.writeString(struct.endDate);
      }
      if (struct.isSetEncounterOutcome()) {
        oprot.writeString(struct.encounterOutcome);
      }
      if (struct.isSetCaseNumber()) {
        oprot.writeString(struct.caseNumber);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSectionEncounterData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.hospital = iprot.readString();
        struct.setHospitalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.interactionType = iprot.readString();
        struct.setInteractionTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.doctor = iprot.readString();
        struct.setDoctorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startDate = iprot.readString();
        struct.setStartDateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endDate = iprot.readString();
        struct.setEndDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.encounterOutcome = iprot.readString();
        struct.setEncounterOutcomeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.caseNumber = iprot.readString();
        struct.setCaseNumberIsSet(true);
      }
    }
  }

}

